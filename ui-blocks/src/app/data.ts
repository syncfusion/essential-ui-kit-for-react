export interface Block {
  name: string;
  title: string;
  description?: string;
  isNew?: boolean;
  url: string;
  componentName: string;
}

export interface BlockList {
  name: string;
  description: string;
  category: string;
  isNew?: boolean;
  isUpdated?: boolean;
  url: string;
  subBlockList: Block[];
}

export class DataService {
  private themeName: string = 'tailwind';
  private categoryIndex: number = 0;

  private readonly signinBlockList: Block[] = [
    { name: 'Sign In', title: 'Simple Sign-In', description: 'In this demo, the sign-in interface offers a simple and intuitive authentication process.', componentName: 'signin-1', url: 'signin-1' },
    { name: 'Sign In', title: 'Sign-In with Visual Background', description: 'In this demo, the split-screen sign-in interface blends visual appeal with usability. One side showcases an image that enhances the overall aesthetic, while the other features a simple, intuitive sign-in form for a smooth authentication experience.', componentName: 'signin-2', url: 'signin-2' },
    { name: 'Sign In', title: 'Sign-In with Feature Highlights', description: 'In this demo, the sign-in form is integrated into a two-part screen layout. One side features a background and highlights key points of the application in a clear, listed format, while the other presents a simple, intuitive sign-in form.', componentName: 'signin-3', url: 'signin-3' }
  ];

  private readonly signoutBlockList: Block[] = [
    { name: 'Sign Out', title: 'Simple Sign-Out', description: 'In this demo, the sign-out interface provides a simple confirmation message upon successful logout.', componentName: 'signout-1', url: 'signout-1' },
    { name: 'Sign Out', title: 'Sign-Out with Visual Background', description: 'In this demo, the split-screen sign-out interface blends visual appeal with usability. One side showcases an image that enhances the overall aesthetic, while the other displays a simple, straightforward confirmation of the sign-out.', componentName: 'signout-2', url: 'signout-2' },
    { name: 'Sign Out', title: 'Sign-Out with Feature Highlights', description: 'In this demo, the sign-out confirmation is integrated into a two-part screen layout. One side features a background that highlights key points of the application in a clear, listed format, while the other displays a simple, straightforward confirmation of the sign-out.', componentName: 'signout-3', url: 'signout-3' }
  ];

  private readonly signupBlockList: Block[] = [
    { name: 'Sign Up', title: 'Simple Sign-Up', description: 'In this demo, the sign-up interface provides a simple yet intuitive registration process.', componentName: 'signup-1', url: 'signup-1' },
    { name: 'Sign Up', title: 'Sign-Up with Visual Background', description: 'In this demo, the split-screen sign-up interface blends visual appeal with usability. One side showcases an image that enhances the overall aesthetic, while the other features a simple, intuitive sign-up form, making the registration process smooth and user-friendly.', componentName: 'signup-2', url: 'signup-2' },
    { name: 'Sign Up', title: 'Sign-Up with Feature Highlights', description: 'In this demo, the sign-up form is integrated into a two-part screen layout. One side features a background that highlights key points of the application in a clear, listed format, while the other presents a simple, intuitive sign-up form.', componentName: 'signup-3', url: 'signup-3' }
  ];

  private readonly signinMobileBlockList: Block[] = [
    { name: 'Mobile - Sign In', title: 'Simple Mobile Sign In', description: 'In this demo, the sign-in with mobile number interface offers a simple and intuitive login process.', componentName: 'signin-mobile-1', url: 'signin-mobile-1' },
    { name: 'Mobile - Sign In', title: 'Mobile Sign In with Visual Background', description: 'In this demo, the split-screen sign-in interface seamlessly blends visual appeal with functional usability. One side showcases an engaging image that enhances the overall aesthetic, while the other features a simple, intuitive form for signing in using a mobile number, making the authentication process quick and easy.', componentName: 'signin-mobile-2', url: 'signin-mobile-2' },
    { name: 'Mobile - Sign In', title: 'Mobile Sign In with Feature Highlights', description: 'In this demo, the sign-in form is integrated into a two-part screen layout. One side features a background that highlights key points of the application in a clear, listed format, while the other presents a simple, intuitive sign-in form with the option to log in using a mobile number.', componentName: 'signin-mobile-3', url: 'signin-mobile-3' }
  ];

  private readonly unlockSessionBlockList: Block[] = [
    { name: 'Unlock Session', title: 'Simple Session Unlock', description: 'In this demo, the unlock session interface provides a simple and secure method to regain access to an expired or locked session.', componentName: 'unlock-session-1', url: 'unlock-session-1' },
    { name: 'Unlock Session', title: 'Session Unlock with Visual Background', description: 'In this demo, the split-screen unlock session interface seamlessly blends visual appeal with functional usability. One side showcases an engaging image that enhances the overall aesthetic, while the other features a simple, intuitive form where users can unlock their session by entering their email address, providing a quick and easy way to regain access.', componentName: 'unlock-session-2', url: 'unlock-session-2' },
    { name: 'Unlock Session', title: 'Session Unlock with Feature Highlights', description: 'In this demo, the unlock session is seamlessly integrated into a two-part screen layout. One side features an inviting background that highlights key points of the application in a clear, listed format, while the other presents a simple, intuitive form where users can unlock their session by entering their email address.', componentName: 'unlock-session-3', url: 'unlock-session-3' }
  ];

  private readonly forgotPasswordBlockList: Block[] = [
    { name: 'Forgot Password', title: 'Simple Password Recovery', description: 'In this demo, the forgot password interface offers a straightforward process for recovering account access.', componentName: 'forgot-password-1', url: 'forgot-password-1' },
    { name: 'Forgot Password', title: 'Password Recovery with Visual Background', description: 'In this demo, the split-screen forgot password interface seamlessly blends visual appeal with usability. One side showcases an image that enhances the overall aesthetic, while the other features a simple, intuitive form where users can reset their password by entering their email address.', componentName: 'forgot-password-2', url: 'forgot-password-2' },
    { name: 'Forgot Password', title: 'Password Recovery with Feature Highlights', description: 'In this demo, the forgot password block is integrated into a two-part screen layout. One side features a background that highlights key points of the application in a clear, listed format, while the other presents a simple, intuitive form where users can reset their password by entering their email address.', componentName: 'forgot-password-3', url: 'forgot-password-3' }
  ];

  private readonly signinOTPBlockList: Block[] = [
    { name: 'OTP - Sign In', title: 'Simple OTP Sign-In', description: 'In this demo, the sign-in with OTP interface provides a quick and secure authentication process using a one-time password.', componentName: 'signin-otp-1', url: 'signin-otp-1' },
    { name: 'OTP - Sign In', title: 'OTP Sign-In with Visual Background', description: 'In this demo, the split-screen sign-in interface seamlessly blends visual appeal with functional usability. One side showcases an image that enhances the overall aesthetic, while the other features a simple, intuitive form for signing in using an OTP, providing a secure and efficient way to authenticate.', componentName: 'signin-otp-2', url: 'signin-otp-2' },
    { name: 'OTP - Sign In', title: 'OTP Sign-In with Feature Highlights', description: 'In this demo, the sign-in form is integrated into a two-part screen layout. One side features a background that highlights key points of the application in a clear, listed format, while the other presents a simple, intuitive sign-in form with the option to log in using an OTP.', componentName: 'signin-otp-3', url: 'signin-otp-3' }
  ];

  private readonly pricingCardBlockList: Block[] = [
    { name: 'Pricing Card', title: 'Simple Pricing Card', description: 'In this demo, the pricing layout features a clean and intuitive design for displaying lifetime membership pricing information. Users can easily toggle between monthly and yearly pricing options using an interactive switch. A prominent CTA button is provided, enabling users to select the plan.', componentName: 'pricing-card-1', url: 'pricing-card-1' },
    { name: 'Pricing Card', title: 'Pricing Card with Benefit Highlights', description: 'In this demo, the pricing layout features a clean and intuitive design for displaying lifetime membership pricing information. Users can easily toggle between monthly and yearly pricing options using an interactive switch. The layout also highlights key membership benefits, helping users understand the value of the plan. A prominent CTA button is provided, enabling users to select the plan.', componentName: 'pricing-card-2', url: 'pricing-card-2' },
    { name: 'Pricing Card', title: 'Two-Tier Pricing Card', description: 'In this demo, the pricing layout features a clean and intuitive design for displaying two distinct business plan options. Users can easily toggle between monthly and yearly pricing options using an interactive switch. A prominent CTA button is provided for each plan, allowing users to select their preferred option.', componentName: 'pricing-card-3', url: 'pricing-card-3' },
    { name: 'Pricing Card', title: 'Two-Tier Pricing Card with Benefit Highlights', description: 'In this demo, the pricing layout features a clean design for displaying two distinct plan options. Users can easily toggle between monthly and yearly pricing options using an interactive switch. The layout highlights the unique benefits of each plan, helping users understand the difference between the options. A prominent CTA button is provided for each plan, allowing users to select their preferred option.', componentName: 'pricing-card-4', url: 'pricing-card-4' },
    { name: 'Pricing Card', title: 'Three-Tier Pricing  Card', description: 'In this demo, the pricing layout design displays three distinct subscription options. Users can toggle between monthly and yearly pricing options using an interactive switch. A CTA button is provided for each plan, allowing users to select their preferred option.', componentName: 'pricing-card-5', url: 'pricing-card-5' },
    { name: 'Pricing Card', title: 'Three-Tier Pricing  Card with Benefit Highlights', description: 'In this demo, the pricing layout has an intuitive design for displaying three distinct subscription options. Users can toggle between monthly and yearly pricing using a switch. The layout highlights the benefits of each plan, helping users understand the differences among them. CTA buttons allow users to select their preferred option.', componentName: 'pricing-card-6', url: 'pricing-card-6' }
  ];

  private readonly planComparisonBlockList: Block[] = [
    { name: 'Plan Comparison', title: 'Plan Comparison by Highlights', description: 'In this demo, the comparison table offers a clean and intuitive design for comparing features across different plans. Users can easily view the key differences among the plans, helping them make an informed decision based on their specific needs. The features are clearly displayed for easy comparison.', componentName: 'plan-comparison-1', url: 'plan-comparison-1' },
    { name: 'Plan Comparison', title: 'Pricing Plan Comparison by Highlights', description: 'In this demo, the comparison table displays three plans side by side, highlighting the differences in features. The first plan is an entry-level option, while the second and third plans offer more advanced features. Each plan includes a CTA button, enabling users to choose the plan that best suits their purpose.', componentName: 'plan-comparison-2', url: 'plan-comparison-2' }
  ];

  private readonly checkoutBlockList: Block[] = [
    { name: 'Checkout', title: 'Simple Checkout', description: 'In this demo, the checkout process collects delivery details, provides multiple payment and shipping options, and displays a clear order summary with tax and discounts. The simple layout guides users through shipping, payment, and order review.', componentName: 'checkout-1', url: 'checkout-1' },
    { name: 'Checkout', title: 'Checkout Using Accordion', description: 'In this demo, the accordion-style checkout process gathers information through collapsible sections, such as delivery details, payment methods, and product summary. The structured layout streamlines the process, breaking it into clear, manageable steps with a clean, user-friendly design.', componentName: 'checkout-2', url: 'checkout-2' },
    { name: 'Checkout', title: 'Checkout Showing Product Details', description: 'In this demo, the two-column checkout layout displays a detailed product list with thumbnail images and an order summary on one side, and sections for billing, shipping, and payment options on the other.', componentName: 'checkout-3', url: 'checkout-3' },
    { name: 'Checkout', title: 'Checkout Using Side Panel', description: 'In this demo, the checkout page is designed within a sidebar panel that displays the order summary along with sections for billing, shipping, and payment options.', componentName: 'checkout-4', url: 'checkout-4' },
    { name: 'Checkout', title: 'Checkout Using Model', description: 'In this demo, the checkout page is designed within a model dialog that displays the order summary along with sections for billing, shipping, and payment options.', componentName: 'checkout-5', url: 'checkout-5' }
  ];

  private readonly gridBlockList: Block[] = [
    { name: 'Grid', title: 'Lead Management Table', description: 'In this demo, you will find a table displaying a list of leads with relevant details across multiple columns. This layout provides a clear, structured view, making it easy to organize, manage, and efficiently track leads for prioritization.', componentName: 'grid-1', url: 'grid-1' },
    { name: 'Grid', title: 'Network Support Ticket Table', description: 'In this demo, you will find a table displaying support tickets for the network team, with relevant details across multiple columns. This layout provides a clear, structured view, enabling easy organizing and efficient tracking of support requests.', componentName: 'grid-2', url: 'grid-2' },
    { name: 'Grid', title: 'Invoice Record Table', description: 'In this demo, you will find a table displaying detailed invoice information across multiple columns. This layout provides a clear, structured view, improving operational efficiency in managing and tracking invoices.', componentName: 'grid-3', url: 'grid-3' },
    { name: 'Grid', title: 'Contact Directory Table', description: 'In this demo, you will find a table displaying a contacts list with essential information across multiple columns. This layout provides a clear, structured view, enhancing workflow efficiency in managing and accessing contact details.', componentName: 'grid-4', url: 'grid-4' },
    { name: 'Grid', title: 'Asset Management Table', description: 'In this demo, you will find a table displaying asset management details across multiple columns. This layout provides a clear, structured view, enhancing process efficiency in tracking and managing assets effectively.', componentName: 'grid-5', url: 'grid-5' },
    { name: 'Grid', title: 'Transaction Record Table', description: 'In this demo, you will find a table displaying detailed transaction information across multiple columns. This layout provides a clear, structured view, enhancing financial efficiency in managing and tracking financial transactions.', componentName: 'grid-6', url: 'grid-6' },
    { name: 'Grid', title: 'Product Sales Table', description: 'In this demo, you will find a table displaying key details of sales transactions across multiple columns. This layout provides a clear, structured view, enhancing sales efficiency in tracking and managing sales data effectively.', componentName: 'grid-7', url: 'grid-7' },
    { name: 'Grid', title: 'Sales Performance Table', description: 'In this demo, you will find a table displaying key performance metrics for sales team members across multiple columns. This layout provides a clear, structured view, enhancing performance efficiency in tracking and evaluating their contributions and performance levels.', componentName: 'grid-8', url: 'grid-8' },
    { name: 'Grid', title: 'Roles and Permissions Table', description: 'In this demo, you will find a table displaying various user roles and their associated permissions across multiple columns. This layout provides a clear, structured view, enhancing administrative efficiency in managing access controls and user rights effectively.', componentName: 'grid-9', url: 'grid-9' },
    { name: 'Grid', title: 'Product Sales Analysis Table', description: 'In this demo, you will find a table displaying detailed sales data for each product across multiple columns. This layout provides a clear, structured view, enhancing analytical efficiency in tracking sales performance and managing inventory.', componentName: 'grid-10', url: 'grid-10' }
  ];

  private readonly navbarBlockList: Block[] = [
    { name: 'Navbar', title: 'Simple Navbar', description: 'In the demo, the navigation bar is showcased, featuring the company logo and name on the left. It includes a search feature for quick content access, an option to add new widgets, menu icons for easy navigation, and a user profile section. On tablet and mobile devices, the layout adjusts to fit the screen, ensuring an optimized viewing experience.', componentName: 'navbar-1', url: 'navbar-1' },
    { name: 'Navbar', title: 'Navbar with Menu and other options', description: 'In this demo, a double navigation bar is exhibited. The top bar prominently displays the company logo and name, along with primary navigation links, an upgrade button, menu icons for easy navigation, and a user profile section. The bottom bar provides secondary navigation links and a search bar for easy access to content. On tablet and mobile devices, the layout adjusts to fit the screen, ensuring an optimized viewing experience.', componentName: 'navbar-2', url: 'navbar-2' },
    { name: 'Navbar', title: 'Navbar with Menu and Dropdown', description: 'In this demo, a double navigation bar is exhibited. The top bar prominently displays the company logo and name, along with menu icons for easy navigation and dropdowns for selecting a location and contact. The bottom bar provides additional navigation options. On tablet and mobile devices, the layout adjusts to fit the screen, ensuring an optimized viewing experience.', componentName: 'navbar-3', url: 'navbar-3' },
    { name: 'Navbar', title: 'Navbar with Menu and Search', description: 'In this demo, a double navigation bar is exhibited. The top bar prominently displays the company logo and name, along with primary navigation links, menu icons for easy navigation, a dropdown, and a user profile section. The bottom bar provides a search bar for easy access to content. On tablet and mobile devices, the layout adjusts to fit the screen, ensuring an optimized viewing experience.', componentName: 'navbar-4', url: 'navbar-4' },
    { name: 'Navbar', title: 'Navbar with Menu and Breadcrumb', description: 'In this demo, a three-tier navigation bar is exhibited. The top bar prominently displays the company logo and name, along with a search option, menu icons for easy navigation, and a user profile section. The middle bar includes breadcrumbs for quick navigation, along with dropdown options for additional selections. The bottom bar provides other navigation links. On tablet and mobile devices, the layout adjusts to fit the screen, ensuring an optimized viewing experience.', componentName: 'navbar-5', url: 'navbar-5' },
    { name: 'Navbar', title: 'Navbar with Multiple Options', description: 'In this demo, a three-tier navigation bar is exhibited. The top bar prominently displays the company logo and name, along with a user profile section and primary menu navigation links. The middle bar includes secondary menu navigation links. The bottom bar provides a search option and call-to-action (CTA) buttons. On tablet and mobile devices, the layout adjusts to fit the screen, ensuring an optimized viewing experience.', componentName: 'navbar-6', url: 'navbar-6' }
  ];

  private readonly sidebarBlockList: Block[] = [
    { name: 'Sidebar', title: 'Simple Sidebar', description: 'In this demo, you will find the organization name displayed at the top of the sidebar, followed by a list of navigation menu items for easy access to key sections of the application. Below that, an accordion-style list presents additional items that can be expanded or collapsed, providing a compact and organized way to manage related content and actions.', componentName: 'sidebar-1', url: 'sidebar-1' },
    { name: 'Sidebar', title: 'Sidebar with Alert Notification', description: 'In this demo, we’ve built upon the previous setup by adding alert notifications that dynamically pop up within the sidebar. These notifications keep users informed of important updates in real time, without disrupting their workflows.', componentName: 'sidebar-2', url: 'sidebar-2' },
    { name: 'Sidebar', title: 'Profile Sidebar', description: 'In this demo, the sidebar is organized with the user profile image, name, and email ID at the top for quick identification. Below this, a list of navigation items provides quick links to important sections of the application. The logout button at the bottom ensures a seamless and secure sign-out process.', componentName: 'sidebar-3', url: 'sidebar-3' },
    { name: 'Sidebar', title: 'Sales and Revenue Sidebar', description: 'In this demo, the sidebar features a user profile with toggle options, followed by a search field for quick access to projects. Below that, several navigation items are organized into two categories. The second category allows users to add options dynamically, providing a customizable and flexible navigation experience.', componentName: 'sidebar-4', url: 'sidebar-4' },
    { name: 'Sidebar', title: 'Sidebar with Multiple Alert Notifications', description: 'In this demo, we’ve built on the previous setup by adding multiple alert notifications that dynamically appear within the sidebar. These notifications keep users informed of all important updates in real time, without interrupting their workflows.', componentName: 'sidebar-5', url: 'sidebar-5' },
    { name: 'Sidebar', title: 'Project Sidebar with Settings', description: 'In this demo, the sidebar displays a user profile with toggle options. Below the profile, the navigation items are grouped into two categories, with the second category allowing users to dynamically add options for a more customizable navigation experience. At the bottom, there are options for settings, as well as help and getting started resources.', componentName: 'sidebar-6', url: 'sidebar-6' },
    { name: 'Sidebar', title: 'Profile Sidebar with Storage and Upgrade Button', description: 'In this demo, the sidebar features a user profile with toggle options, followed by a search field for quick access to projects. Below that, several navigation items are listed, and at the bottom, a progress bar displays storage usage along with an action button for upgrading the account.', componentName: 'sidebar-7', url: 'sidebar-7' },
    { name: 'Sidebar', title: 'User and Contact Sidebar', description: 'In this demo, the sidebar features a user profile with toggle options, followed by grouped navigation items. Below that, a section highlights active users with their profile images and names, providing easy access.', componentName: 'sidebar-8', url: 'sidebar-8' },
    { name: 'Sidebar', title: 'Nested Sidebar', description: 'In this demo, the sidebar is nested, with quick access options on the left and standard navigation items on the right.', componentName: 'sidebar-9', url: 'sidebar-9' },
    { name: 'Sidebar', title: 'Quick Access Sidebar', description: 'In this demo, the sidebar features a minimalistic design with only quick access options.', componentName: 'sidebar-10', url: 'sidebar-10' },
    { name: 'Sidebar', title: 'Right-Aligned Contact Sidebar', description: 'In this demo, the sidebar is positioned on the right side, featuring a list of contacts with relevant customization options. Below that, group conversation options are displayed for convenient access and interaction.', componentName: 'sidebar-11', url: 'sidebar-11' },
    { name: 'Sidebar', title: 'Market Tracker Sidebar', description: 'In this demo, the sidebar is positioned on the right side, showcasing Bitcoin details along with current market values. It also includes a settings option and an option to view more details.', componentName: 'sidebar-12', url: 'sidebar-12' },
    { name: 'Sidebar', title: 'Nested Sidebar with Task Overview', description: 'In this demo, the sidebar is positioned on the right side. Inside the sidebar, the left section features quick access options, while the right section displays a user profile with toggle options. It allows users to create new tasks, view existing tasks, and track completed tasks.', componentName: 'sidebar-13', url: 'sidebar-13' }
  ];

  private readonly returnsBlockList: Block[] = [
    { name: 'Returns', title: 'Return Page for Selecting Products', description: 'This return page allows customers to identify and select the items they wish to return easily. It presents a clear list of purchased items, making it simple for users to choose the correct products for return.', componentName: 'returns-1', url: 'returns-1' },
    { name: 'Returns', title: 'Return Page for Selecting Return Reasons', description: 'This return page provides customers with predefined options to explain why they are returning an item. This helps streamline the return process by categorizing returns and ensuring that each return request is handled appropriately.', componentName: 'returns-2', url: 'returns-2' },
    { name: 'Returns', title: 'Return Page with Pickup Option', description: 'This return page offers customers the convenience of scheduling a pickup for their returned items. This feature lets businesses eliminate the need for customers to visit a return location, making the process more convenient and hassle-free, especially for bulky or hard-to-return items.', componentName: 'returns-3', url: 'returns-3' },
    { name: 'Returns', title: 'Return Page with Refund Option', description: 'This return page allows customers to submit their return request and select whether they prefer a refund or another option. Users can easily specify their refund preference, helping to process their return more quickly and efficiently, with clear details on the amount and method of the refund.', componentName: 'returns-4', url: 'returns-4' },
    { name: 'Returns', title: 'Return Confirmation', description: 'This return confirmation page displays a success message once the return request is processed, reassuring users that their return is being handled.', componentName: 'returns-5', url: 'returns-5' }
  ];

  private readonly cardsBlockList: Block[] = [
    { name: 'Cards', title: 'Simple Card Layout', description: 'In this demo, you will explore a collection of cards designed to capture attention and provide detailed information. Each card features a visually appealing image, complemented by a concise description, a title, and a call-to-action button for further exploration.', componentName: 'cards-1', url: 'cards-1' },
    { name: 'Cards', title: 'Rounded Corner Card with Spacious Design', description: 'In this demo, you will explore a series of informative cards, each focusing on a distinct theme, such as fashion, fitness, and technology. Each card includes an eye-catching image with rounded corners and custom spacing, as well as a concise headline and detailed description.', componentName: 'cards-2', url: 'cards-2' },
    { name: 'Cards', title: 'Rounded Corner Card with Spacious Design and a Button', description: 'In this demo, we present a set of visually engaging cards that seamlessly adjust to different visual styles. Each card features an image with rounded corners and distinct spacing around it, a title, a concise description, and a Get Started call-to-action button to encourage user interaction.', componentName: 'cards-3', url: 'cards-3' },
    { name: 'Cards', title: 'Card Layout with Avatar', description: 'In this demo, we feature a series of personalized cards that spotlight individuals and their areas of expertise. Each card includes a profile picture, the individual’s name and area of expertise, an article title, and content.', componentName: 'cards-4', url: 'cards-4' },
    { name: 'Cards', title: 'Card Layout with Avatar and Edit Button', description: 'In this demo, we show a series of interactive profile cards that spotlight individuals and their areas of expertise. Each card features a profile picture, name, area of expertise, and an Edit button for customization. Accompanying these is an engaging headline and a brief article description, offering insights into different topics.', componentName: 'cards-5', url: 'cards-5' },
    { name: 'Cards', title: 'Benefits Highlight Card with CTA', description: 'In this demo, we present a collection of cards designed to highlight the benefits of different subjects. Each card features a title and description, with the benefits listed to help readers easily grasp the key points. A Get Started Now call-to-action button is also available to encourage further action.', componentName: 'cards-6', url: 'cards-6' },
    { name: 'Cards', title: 'Card Layout with Badges', description: 'In this demo, a collection of cards brings to light different extraordinary places and experiences from around the world. Each card features a stunning image paired with a title, description, and a categorizing badge label at the bottom.', componentName: 'cards-7', url: 'cards-7' },
    { name: 'Cards', title: 'Card Layout with Split Images', description: 'In this demo, the split-image cards showcase captivating visuals on the left, with descriptive content on the right. Each card includes an image, title, and description. A View Details call-to-action button invites further exploration.', componentName: 'cards-8', url: 'cards-8' },
    { name: 'Cards', title: 'Text-Focused Card Layout', description: 'In this demo, each card displays a clear title, a description, and an author section with an avatar. The design is easy to read and helps users connect with the author and their content.', componentName: 'cards-9', url: 'cards-9' },
    { name: 'Cards', title: 'Card Layout with Left-Aligned Image', description: 'In this demo, we showcase a collection of informative cards that highlight technological advancements. Each card layout pairs a striking image on the left with an author section on the right featuring an avatar, title, and description.', componentName: 'cards-10', url: 'cards-10' },
    { name: 'Cards', title: 'User Profile Card Layout', description: 'In this demo, we feature cards that showcase eye-catching images at the top, each with a title and a short summary to provide context. The card ends with an author section, featuring an avatar, name, role, and date.', componentName: 'cards-11', url: 'cards-11' },
    { name: 'Cards', title: 'Cards with User Avatars and Ratings', description: 'In this demo, each card features an icon, title, and brief description. Below this, user avatars and a star rating provide community feedback. This layout offers a quick overview of experiences or services and adds credibility through user input and ratings.', componentName: 'cards-12', url: 'cards-12' },
    { name: 'Cards', title: 'Card Layout with Right-Aligned Images', description: 'In this demo, the card layout features text on the left and an image on the right. It includes a category label, title, and description, with a professional look. This setup is ideal for showcasing corporate or business content.', componentName: 'cards-13', url: 'cards-13' },
    { name: 'Cards', title: 'Card Layout with Link Buttons', description: 'In this demo, each card layout includes a title, description, and a View More button. The simple yet attractive design invites users to explore more content.', componentName: 'cards-14', url: 'cards-14' },
    { name: 'Cards', title: 'Card Layout with CTA Button', description: 'In this demo, the card layout features a title, description, and a call-to-action (CTA) button. The clean and straightforward design emphasizes key information while encouraging further engagement.', componentName: 'cards-15', url: 'cards-15' }
  ];

  private readonly emailBlockList: Block[] = [
    { name: 'Email', title: 'Email Composition', description: 'In this demo, users can easily draft and send emails. They can input the sender email, select recipients, and choose options for CC and BCC, along with adding a subject line. A rich text editor lets users prepare, format, and customize the message body. The interface also includes an option to attach files, which may be relevant depending on the subject. Once the email is ready, users can choose to either send it or discard it using the action buttons.', componentName: 'email-1', url: 'email-1' }
  ];

  private readonly chatBlockList: Block[] = [
    { name: 'Chat', title: 'Simple Chat Layout', description: 'In this demo, you will find a chat layout that offers a real-time messaging experience between users. It includes a message input at the bottom, timestamped messages for context, an indicator showing whether the message has been viewed, and icons for easy navigation and quick actions within the chat.', componentName: 'chat-1', url: 'chat-1' },
    { name: 'Chat', title: 'Chat Layout Using Side Panel', description: 'In this demo, you will find a chat layout within the sidebar, offering a real-time messaging experience that lets you open, view, and engage in conversations at any time without disruption. Additionally, the messages are translated into Spanish for better accessibility.', componentName: 'chat-2', url: 'chat-2' }
  ];

  private readonly paginationBlockList: Block[] = [
    { name: 'Pagination', title: 'Simple Pagination', description: 'In this demo, the pagination includes "Previous" and "Next" buttons, along with numbered page links for easy navigation. The current page is highlighted for clarity, and an ellipsis feature provides quick access to distant pages, simplifying the process of browsing through multiple pages.', componentName: 'pagination-1', url: 'pagination-1' },
    { name: 'Pagination', title: 'Advanced Pagination', description: 'In this demo, the pagination includes "Previous" and "Next" buttons, numbered page links, and a dropdown to select items per page. The current page is highlighted for clarity, and it also displays the current page number out of the total pages, along with the total item count, giving users full control over navigation and view settings.', componentName: 'pagination-2', url: 'pagination-2' },
    { name: 'Pagination', title: 'Advanced Pagination with Rounded Selection', description: 'In this demo, the pagination includes "Previous" and "Next" buttons, numbered page links with a round selection style, and a dropdown to select items per page. The current page is highlighted for clarity, and it also displays the current page number out of the total pages, along with the total item count, giving users full control over navigation and view settings.', componentName: 'pagination-3', url: 'pagination-3' },
    { name: 'Pagination', title: 'Advanced Pagination Using Page Selector', description: 'In this demo, the pagination includes "Previous" and "Next" buttons, a page input field displaying the current page out of the total pages, and a dropdown to set items per page. This input field allows users to jump to specific pages, making it easy to navigate through large sets of data.', componentName: 'pagination-4', url: 'pagination-4' },
    { name: 'Pagination', title: 'Shortened Pagination', description: 'In this demo, the pagination includes "First", "Last", "Previous", and "Next" buttons, with the current page and total pages displayed in the center. This compact design offers shortened pagination, displaying only the essential navigation controls for a streamlined user experience.', componentName: 'pagination-5', url: 'pagination-5' },
    { name: 'Pagination', title: 'Pagination in Header Section', description: 'In this demo, the pagination includes "Previous" and "Next" buttons, items-per-page dropdown, and icons for display options and filtering. Positioned within the header, this compact design enables users to easily navigate, adjust views, and apply filters, providing an efficient and user-friendly interface for managing content.', componentName: 'pagination-6', url: 'pagination-6' }
  ];

  private readonly calendarBlockList: Block[] = [
    { name: 'Calendar', title: 'Calendar for Quick View', description: 'In this demo, the calendar layout is positioned on the right as an overlay panel, displaying a monthly view along with a list of scheduled events. The event list shows upcoming meetings, including titles, time slots, and assigned individuals.', componentName: 'calendar-1', url: 'calendar-1' },
    { name: 'Calendar', title: 'Calendar for Room Booking', description: 'In this demo, the calendar layout offers date selection along with filters for personalized room booking. The filters include an accordion to select categories, a price range slider, and checkboxes for choosing hotel facilities, making it easy to narrow down the options.', componentName: 'calendar-2', url: 'calendar-2' },
    { name: 'Calendar', title: 'Calendar with Holiday List', description: 'In this demo, the calendar layout uses an overlay with an agenda view to display events and holidays in a chronological list. At the bottom, a button allows users to add new entries directly from the panel, offering a seamless way to manage and update the calendar.', componentName: 'calendar-3', url: 'calendar-3' },
    { name: 'Calendar', title: 'Calendar with Meeting List', description: 'In this demo, the calendar layout is positioned on the right as an overlay panel, displaying a monthly view along with a list of scheduled events. The event list shows upcoming meetings, including titles, time slots, and duration.', componentName: 'calendar-4', url: 'calendar-4' },
    { name: 'Calendar', title: 'Calendar with To-Do List', description: 'In this demo, the calendar layout combines a calendar view with a to-do list for easy task management. The to-do list displays tasks with checkboxes and strikethrough for completed items, providing a clear overview of daily tasks. At the bottom, a button allows users to add new to-do items, offering an easy way to expand the list as needed.', componentName: 'calendar-5', url: 'calendar-5' },
    { name: 'Calendar', title: 'Calendar with Timeline View', description: 'In this demo, the calendar layout presents a timeline view, displaying holidays in chronological order. It also includes details about individual leave, such as the date, type, and approval status, providing a comprehensive overview.', componentName: 'calendar-6', url: 'calendar-6' }
  ];

  private readonly listBlockList: Block[] = [
    { name: 'List', title: 'Project Task List', description: 'In this demo, the list view presents key project task details for easy tracking. Each item features a checkbox for selection, a task title, a brief description, and relevant metadata, such as the due date and assigned user. It also highlights new tasks, making them easily identifiable.', componentName: 'list-1', url: 'list-1' },
    { name: 'List', title: 'Inbox Messages List', description: 'In this demo, the list view for inbox messages displays a series of items with read and unread indications. Each item includes a name, title, description, and a timestamp indicating when the message was sent. It also features checkboxes on the left for selection and a star icon to mark important messages.', componentName: 'list-2', url: 'list-2' },
    { name: 'List', title: 'Direct Messages List', description: 'In this demo, the list view displays a series of messages, each featuring a profile image, sender name, and message content. The timestamp is shown next to the sender name. Below each message, users can reply, mark the message as read, and access additional options via a More Options menu.', componentName: 'list-3', url: 'list-3' },
    { name: 'List', title: 'Shopping Cart', description: 'In this demo, the list view displays a series of products, each with a product image, name, and other details. The price is shown next to the product, and any discounts are highlighted with a hint. The action buttons for adding, removing, saving, and sharing the product are also included.', componentName: 'list-4', url: 'list-4' },
    { name: 'List', title: 'Country and Code List', description: 'In this demo, the list view displays country names, each with its flag image and country code. A search bar at the top allows users to easily search, and each entry includes text indicating the country abbreviation.', componentName: 'list-5', url: 'list-5' },
    { name: 'List', title: 'Data Fields List', description: 'In this demo, the list view displays form fields, each with a drag icon on the left for reordering. At the bottom, there is a dynamic option to add a field. The design allows users to reorder the fields easily by dragging them, enabling customization of the data collection process.', componentName: 'list-6', url: 'list-6' },
    { name: 'List', title: 'Short-Form Message List', description: 'In this demo, the list view displays a series of short-form messages, each with a profile image, name, message content, and timestamp. The More options icon next to each entry allows users to access additional options or actions related to the message.', componentName: 'list-7', url: 'list-7' },
    { name: 'List', title: 'Chat Conversation List', description: 'In this demo, the list view displays a chat conversation list with user profile images and their messages. Each entry includes the user name, message content, and timestamp. A notification number beside each entry indicates new messages. The design also includes a search bar at the top, allowing users to find specific people, chats, or keywords quickly.', componentName: 'list-8', url: 'list-8' },
    { name: 'List', title: 'Message List', description: 'In this demo, the list view displays a series of notifications. Each notification includes a title, a brief description, and the time it was received. The design is organized to help users stay informed about important news and events with ease.', componentName: 'list-9', url: 'list-9' },
    { name: 'List', title: 'Task List', description: 'In this demo, the list view displays a series of tasks, each with an icon, description, due date, and an avatar on the right. The task information is well-organized, making it easy to identify and navigate through the list.', componentName: 'list-10', url: 'list-10' },
    { name: 'List', title: 'File Directory List', description: 'In this demo, the list view displays an icon on the left representing file type, followed by the file name on the right. Below each file name, a breadcrumb shows its location within the folder hierarchy. The design is organized for clarity, allowing users to easily track and navigate through the directory.', componentName: 'list-11', url: 'list-11' }
  ];

  private readonly floatingMenuBlockList: Block[] = [
    { name: 'Floating Menu', title: 'Floating Menu Featuring Help Bot', description: 'In this demo, the floating menu features a help bot with a search bar at the top for quick access to help topics, followed by a list of helpful topics with clickable entries. Each entry includes a brief description, allowing users to easily navigate and find relevant assistance.', componentName: 'floating-menu-1', url: 'floating-menu-1' },
    { name: 'Floating Menu', title: 'Floating Menu Featuring Chat Bot', description: 'In this demo, the floating menu features a conversation layout that allows users to interact with a chatbot. At the bottom, users can rate the support they received. The interface is clean and organized, with a straightforward message flow and a rating system designed to encourage feedback and enhance user engagement.', componentName: 'floating-menu-2', url: 'floating-menu-2' },
    { name: 'Floating Menu', title: 'Floating Menu Featuring Form', description: 'In this demo, the floating menu features a form layout that offers users an easy way to reach out for an inquiry. It allows users to quickly fill out their details and submit them for further assistance or follow-up.', componentName: 'floating-menu-3', url: 'floating-menu-3' }
  ];

  private readonly footerBlockList: Block[] = [
    { name: 'Footer', title: 'Footer with Terms & Conditions', description: 'In this demo, the footer is designed to provide quick access to the brand, its key policies, and copyright information. It features the brand logo and name, navigation links to policy pages, and a copyright notice.', componentName: 'footer-1', url: 'footer-1' },
    { name: 'Footer', title: 'Minimal Footer', description: 'In this demo, the footer focuses on simplicity and functionality, offering a clear copyright notice and quick access to social media channels for brand engagement.', componentName: 'footer-2', url: 'footer-2' },
    { name: 'Footer', title: 'Footer with Subscription Option', description: 'In this demo, the footer features the brand logo and name, along with a copyright notice. It also has a prominent newsletter subscription option, enabling users to sign up easily and stay informed.', componentName: 'footer-3', url: 'footer-3' },
    { name: 'Footer', title: 'Footer with Sitemap and Contact Information', description: 'In this demo, the footer includes basic information, as seen in previous blocks, along with a comprehensive sitemap and company contact details, providing users with easy navigation and direct access to important pages.', componentName: 'footer-4', url: 'footer-4' },
    { name: 'Footer', title: 'Footer with Sitemap and Detailed Contact Information', description: 'In this demo, the footer includes basic information, as seen in previous blocks, along with a comprehensive sitemap, company contact details, and a location map, providing users with easy navigation and direct access to important pages.', componentName: 'footer-5', url: 'footer-5' }
  ];

  private readonly searchBlockList: Block[] = [
    { name: 'Search', title: 'Search with Category Highlight', description: 'In this demo, the search box features a prominent search bar at the top for easy access. Based on the entered keyword, results are organized by category, allowing users to quickly navigate through categories and select the most relevant results.', componentName: 'search-1', url: 'search-1' },
    { name: 'Search', title: 'Search with "No Result Found" Status Template', description: 'In this demo, the search features a prominent search bar at the top for easy access. Based on the entered keyword, the results are displayed in a simple list format. If no matches are found, a specially designed "No Results Found" status template is shown, giving users a clear indication that their search yielded no results.', componentName: 'search-2', url: 'search-2' },
    { name: 'Search', title: 'Search with Recent History', description: 'In this demo, the search feature with recent history is designed to enhance the user experience by displaying a list of recently entered keywords or phrases, allowing users to quickly revisit and refine their previous searches. This functionality saves time and helps users easily navigate through past queries, making the search process more efficient.', componentName: 'search-3', url: 'search-3' },
    { name: 'Search', title: 'Search Contacts', description: 'In this demo, the search feature allows users to quickly search contacts by entering contact names. The results are displayed in a simple list format, making it easy for users to view and select the desired contact.', componentName: 'search-4', url: 'search-4' },
    { name: 'Search', title: 'Search with Chip as Filter', description: 'In this demo, the search feature includes a set of chips as filter options, enabling users to instantly refine their results by selecting relevant chips. This streamlined approach allows users to quickly narrow down their search and find the most relevant information.', componentName: 'search-5', url: 'search-5' }
  ];

  private readonly tileViewBlockList: Block[] = [
    { name: 'Tile View', title: 'Ticket Management View', description: 'In this demo, a tile view layout for ticket management is showcased. It enables users to create new tickets easily. It also includes features like a search bar, toggle switch, and filter button for seamless navigation and filtering. Inside the tiles, a checkbox on the left allows for bulk actions, while the main content area displays essential ticket details. At the bottom, action buttons and dropdowns allow users to select categories, assign tickets, set priorities, and more, allowing efficient ticket management.', componentName: 'tile-view-1', url: 'tile-view-1' },
    { name: 'Tile View', title: 'Shopping Cart View', description: 'In this demo, a tile view layout for an e-commerce shopping cart is showcased. A switch at the top enables users to filter for discounted items, while a search bar and category filter on the right provide convenient product navigation. Each product tile includes product details, like the name, image, and availability, and the option to add it to the cart.', componentName: 'tile-view-2', url: 'tile-view-2' },
    { name: 'Tile View', title: 'Transaction View', description: 'In this demo, a tile view layout for financial transactions is showcased, providing a streamlined overview of financial records. The top section includes an option to add transactions, a breadcrumb navigation, a toggle filter, and a date-range selector to refine transaction views. Each transaction entry displays essential details for quick identification and efficient management.', componentName: 'tile-view-3', url: 'tile-view-3' },
    { name: 'Tile View', title: 'Travel Booking View', description: 'In this demo, a tile view layout for a travel-ticket booking view is showcased, offering a clear and user-friendly interface. The top section features the user profile along with notifications, followed by search and filter options to narrow down results. Each tile organizes essential details in a structured layout, making it easy to browse and explore available booking options.', componentName: 'tile-view-4', url: 'tile-view-4' },
    { name: 'Tile View', title: 'Job Search View', description: 'In this demo, a tile view layout for job searching is showcased, offering a user-friendly interface for participation in the job search process. At the top, users can access essential search and filter options, including a central search bar for quick queries. The tiles display job listings with key details such as job title, company name, and location, arranged in a clear and organized format. At the bottom of each tile, an action button allows users to apply for jobs, and one at the bottom of the page lets them load more tiles, ensuring an efficient and intuitive job search experience.', componentName: 'tile-view-5', url: 'tile-view-5' }
  ];

  private readonly headerBlockList: Block[] = [
    { name: 'Header', title: 'Header with Tabs for Navigation', description: 'In this demo, the page header features a bold section title at the top left, with horizontally aligned tabs below it for switching categories. A settings icon at the top right allows users to manage preferences.', componentName: 'header-1', url: 'header-1' },
    { name: 'Header', title: 'Section Header with Navigation Bars', description: 'In this demo, the page header includes a section title and tabs for navigating categories. On the right, buttons are provided for managing files and folders, and a badge below them displays the total document count for easy tracking.', componentName: 'header-2', url: 'header-2' },
    { name: 'Header', title: 'Tabbed Header with Filters and Search Options', description: 'In this demo, the page header organizes content under tabs that include a category name and a corresponding count badge. A search bar and filter button on the right allow users to quickly find the employees they’re looking for.', componentName: 'header-3', url: 'header-3' },
    { name: 'Header', title: 'Header with Filters and Choice Selections', description: 'In this demo, the page header displays a title and categorized status tabs with count badges. Below the tabs, prominent filter and clear buttons, along with choice chips, are included for refining views.', componentName: 'header-4', url: 'header-4' },
    { name: 'Header', title: 'Categorized Header with Tabs and Actions', description: 'In this demo, the header features a profile section on the left that includes a profile icon and the user’s name. Next to them, contextual tabs are provided for navigation, and on the right, buttons provide quick access to essential functionalities.', componentName: 'header-5', url: 'header-5' },
    { name: 'Header', title: 'Tabbed Header with Filters and Refinements', description: 'In this demo, the page header features navigational tabs with content counts. Below the tabs, a search bar and preconfigured filters are provided for refining data, while buttons on the right provide additional filter customization options.', componentName: 'header-6', url: 'header-6' },
    { name: 'Header', title: 'Header with Breadcrumbs, Collaboration, and Action Controls', description: 'In this demo, the header features a breadcrumb for navigation at the top and action icons for collaboration and sharing on the right. Below the header, a content section provides a clear title, a brief description, and buttons for refreshing data and adding new reports.', componentName: 'header-7', url: 'header-7' },
    { name: 'Header', title: 'Breadcrumb Header with Status Toggle', description: 'In this demo, the header displays a workflow hierarchy via a breadcrumb for easy navigation. A toggle below allows users to manage the workflow status, while action controls on the right provide options for reviewing and executing the workflow.', componentName: 'header-8', url: 'header-8' },
    { name: 'Header', title: 'Filtered Breadcrumb Header with Action Options', description: 'In this demo, the page header includes a breadcrumb for navigation, providing users with context and location within the app. A filter button is prominently placed next to it for refining displayed data, while an action button on the right allows users to add new items or perform other operations.', componentName: 'header-9', url: 'header-9' },
    { name: 'Header', title: 'Page Header with Breadcrumb and Actions', description: 'In this demo, the page header features a breadcrumb navigation bar that helps users understand their current location within the app. Action buttons on the right provide access to additional resources and user interaction options. Below the header, a title highlights the focus area and a button to its right allows further exploration.', componentName: 'header-10', url: 'header-10' },
    { name: 'Header', title: 'Breadcrumb Header with Navigation Tabs', description: 'In this demo, the header features a breadcrumb for navigation and a prominent title above it to establish the user’s location within the app. Below these, tabs organize content into sections, with a clear indicator highlighting the active tab.', componentName: 'header-11', url: 'header-11' },
    { name: 'Header', title: 'Header with Date Filters and Actions', description: 'In this demo, the page header includes a title on the left and a button on the right. Below, date pickers and a dropdown that includes predefined range filters enable efficient data navigation and filtering. A button to the right of the dropdown lets users perform a key operation.', componentName: 'header-12', url: 'header-12' },
    { name: 'Header', title: 'Navigation Header with Filters and Reset Options', description: 'In this demo, the header features a title on the left and navigation arrows above it for users to move between sections. A button at the top right provides instant access to a key action. Below, input fields and dropdown filters allow users to customize their view, while a reset button lets users clear all selections for a fresh start.', componentName: 'header-13', url: 'header-13' }
  ];

  private readonly statisticsBlockList: Block[] = [
    { name: 'Statistics', title: 'E-Commerce KPIs', description: 'In this demo, the statistics blocks show key performance metrics with total values and percentage comparisons in a defined timeframe. Trends are indicated with intuitive color codes, enabling users to quickly evaluate performance and identify insights.', componentName: 'statistics-1', url: 'statistics-1' },
    { name: 'Statistics', title: 'Detailed Website Metrics', description: 'In this demo, website statistics are showcased in a structured format with contextual tooltips. Each metric is supported by trend indicators, percentage changes, and visual indicators for clarity, enabling effective performance monitoring over time.', componentName: 'statistics-2', url: 'statistics-2' },
    { name: 'Statistics', title: 'Revenue and Lead Metrics', description: 'In this demo, the statistics blocks show a concise display of key performance metrics, including revenue and lead metrics, structured for clarity and ease of understanding. Each metric is supported by trend indicators, percentage changes, and right-aligned icons for intuitive visual representation and enhanced context.', componentName: 'statistics-3', url: 'statistics-3' },
    { name: 'Statistics', title: 'Activity and Wellness Metrics', description: 'In this demo, the statistics blocks showcase key health metrics, in individual cards. Each card features bold numeric values, descriptive labels, trend indicators, and supportive icons for intuitive understanding, with call-to-actions placed in the footer to encourage further exploration.', componentName: 'statistics-4', url: 'statistics-4' },
    { name: 'Statistics', title: 'Healthcare Performance', description: 'In this demo, the statistics blocks showcase key operational metrics in a structured card format. Each metric is supported by trend graphs, percentage changes, and visual indicators to reflect performance shifts. The color-coded trends and clear labeling ensure quick comprehension of the data.', componentName: 'statistics-5', url: 'statistics-5' },
    { name: 'Statistics', title: 'Social Media Metrics', description: 'In this demo, the statistics blocks showcase key metrics in individual cards with clear headers for easy identification. Each card includes comparative data, and trend indicators to highlight performance shifts. The structured layout ensures quick and clear understanding of key metrics.', componentName: 'statistics-6', url: 'statistics-6' },
    { name: 'Statistics', title: 'Market Performance Metrics', description: 'In this demo, the statistics blocks showcase a concise summary of metrics in a structured layout optimized for seamless development integration. Each metric includes a value, supporting details, trend indicators, and right-aligned icons for added context.', componentName: 'statistics-7', url: 'statistics-7' },
    { name: 'Statistics', title: 'Call Center Performance ', description: 'In this demo, the statistics blocks show key call metrics in a structured layout. Each metric is displayed with its value, percentage change, and a colored icon placed at the top left for visual emphasis and context.', componentName: 'statistics-8', url: 'statistics-8' },
    { name: 'Statistics', title: 'User Activity Tracking Metrics', description: 'In this demo, the statistics blocks showcase key metrics displayed in a structured layout. Each card features a colored icon at the top left, followed by a clear heading, metric value, and percentage change to highlight performance trends effectively.', componentName: 'statistics-9', url: 'statistics-9' },
    { name: 'Statistics', title: 'Financial Performance', description: 'In this demo, the statistics blocks showcase key performance metrics in visually distinct cards. Each card includes a colored icon at the top left, descriptive headings, and a badge with indicators to highlight trends such as growth or decline.', componentName: 'statistics-10', url: 'statistics-10' },
    { name: 'Statistics', title: 'E-Commerce Metrics', description: 'In this demo, the statistics blocks showcase performance metrics in individual cards with trend lines. Each card includes current values, percentage changes, and icons at the top right for visual context, allowing users to track progress effectively.', componentName: 'statistics-11', url: 'statistics-11' },
    { name: 'Statistics', title: 'Financial Goal Progress', description: 'In this demo, the statistics blocks showcase progress toward specific goals with visually engaging cards. Each card features a colored icon at the top left, descriptive headings, and detailed metrics. A progress bar at the bottom provides a clear visual representation of completion status.', componentName: 'statistics-12', url: 'statistics-12' }
  ];

  private readonly filterPanelBlockList: Block[] = [
    { name: 'Filter Panel', title: 'Basic Filter Panel with Dropdowns', description: 'In this demo, the filter panel provides dropdown inputs for basic filtering, enabling users to refine results effortlessly. A footer with a prominent action button ensures quick and straightforward application of filters.', componentName: 'filter-panel-1', url: 'filter-panel-1' },
    { name: 'Filter Panel', title: 'Conditional Query Filter Panel', description: 'In this demo, the filter panel includes dropdowns for setting conditions, providing precise data refinement. Action buttons are at the bottom, enabling quick application or saving of filters.', componentName: 'filter-panel-2', url: 'filter-panel-2' },
    { name: 'Filter Panel', title: 'Filter Panel with Footer Actions', description: 'In this demo, the filter panel features grouped dropdowns for data refinement, allowing users to organize filters logically. A sticky footer keeps action buttons prominently visible.', componentName: 'filter-panel-3', url: 'filter-panel-3' },
    { name: 'Filter Panel', title: 'Tabbed Content Filter Panel', description: 'In this demo, the filter panel organizes filters across multiple tabs. Each tab contains dropdowns and input fields to refine data based on specific categories or criteria.', componentName: 'filter-panel-4', url: 'filter-panel-4' },
    { name: 'Filter Panel', title: 'Filter Panel with Multi-Selection Checkboxes', description: 'In this demo, the filter panel uses checkboxes for multi-option selection, allowing users to select multiple criteria. Toggles provide additional refinement options, while action buttons enable the quick application of filters.', componentName: 'filter-panel-5', url: 'filter-panel-5' },
    { name: 'Filter Panel', title: 'Searchable Filter Panel with Inputs', description: 'In this demo, the filter panel combines search inputs with dropdowns, allowing users to filter data efficiently and with precision. The layout emphasizes clarity, making it easy to navigate and use.', componentName: 'filter-panel-6', url: 'filter-panel-6' },
    { name: 'Filter Panel', title: 'Interactive Filter Panel with Chips', description: 'In this demo, the filter panel incorporates chip inputs for interactive, multi-option selection, along with radio listings for precise filtering. Toggles, a rating filter, and action buttons complete the design, providing an intuitive and efficient filtering experience.', componentName: 'filter-panel-7', url: 'filter-panel-7' },
    { name: 'Filter Panel', title: 'Accordion Filter Panel', description: 'In this demo, the filter panel organizes filters within accordion sections, enhancing space utilization and clarity. Each section reveals checkboxes, toggles, and radio buttons, providing users with detailed and customizable filtering options.', componentName: 'filter-panel-8', url: 'filter-panel-8' }
  ];

  private readonly modalsBlockList: Block[] = [
    { name: 'Modals', title: 'Two-Column Layout Modal for Forms', description: 'In this demo, the modal dialog features a two-column layout with a section for profile image upload, input fields for contact details, dropdowns for selections, and checkboxes for preferences. Action buttons are at the bottom.', componentName: 'modals-1', url: 'modals-1' },
    { name: 'Modals', title: 'Single-Column Form Modal', description: 'In this demo, the modal collects essential details with a single-column layout. It includes required fields, optional inputs, and a dropdown for streamlined data entry.', componentName: 'modals-2', url: 'modals-2' },
    { name: 'Modals', title: 'Accordion Layout Modal', description: 'In this demo, the modal features an accordion layout, organizing information into expandable sections for efficiency. Each section includes input fields, toggles, and dropdowns, enabling smooth data configuration. Action buttons at the bottom simplify task completion.', componentName: 'modals-3', url: 'modals-3' },
    { name: 'Modals', title: 'Searchable Checklist Modal', description: 'In this demo, the modal features a searchable input at the top for filtering items, a checklist for selecting multiple entries, and dropdown menus aligned to the right of each list item for assigning specific options. An informational label is placed at the footer alongside action buttons, ensuring clarity and efficient interactions.', componentName: 'modals-4', url: 'modals-4' },
    { name: 'Modals', title: 'Two-Column Input Modal', description: 'In this demo, the modal features a two-column layout with labeled input fields, dropdown menus for selections, and a multiline text area for detailed descriptions. Date pickers and checkboxes are included for capturing timeline details. Action buttons at the footer ensure a seamless user experience.', componentName: 'modals-5', url: 'modals-5' },
    { name: 'Modals', title: 'Data Grid Modal with Export Features', description: 'In this demo, the modal uses headers to group related sections and improve readability. Labels are positioned to the left of input fields for clarity, ensuring a structured approach that supports efficient data entry and interaction.', componentName: 'modals-6', url: 'modals-6' },
    { name: 'Modals', title: 'Grouping Headers Modal', description: 'In this demo, the modal utilizes grouping headers to organize related sections, ensuring clear separation with left-aligned labels. This structured approach enhances usability, enabling efficient interaction with grouped content.', componentName: 'modals-7', url: 'modals-7' },
    { name: 'Modals', title: 'Tabbed Navigation Modal', description: 'In this demo, the modal layout features a structured form with tabs for easy navigation. It includes a section for image upload, input fields for entering details, dropdown menus for selecting options, and toggle switches for settings. Action buttons are at the bottom for user interactions.', componentName: 'modals-8', url: 'modals-8' },
    { name: 'Modals', title: 'Single-Column Layout Modal with RTE', description: 'In this demo, the modal features a single-column layout with structured inputs, including a priority selector and a due-date picker, alongside a rich text editor (RTE) for descriptions. A prominent call-to-action button ensures efficient ticket submission.', componentName: 'modals-9', url: 'modals-9' },
    { name: 'Modals', title: 'Modal with Sidebar Navigation', description: 'In this demo, the modal layout features a sidebar menu for navigation. It allows users to update account information, manage security settings, and toggle advanced options. Clear buttons and concise labels ensure an intuitive experience.', componentName: 'modals-10', url: 'modals-10' },
    { name: 'Modals', title: 'Feedback Modal with RTE', description: 'In this demo, the modal allows users to provide detailed feedback on a document using an intuitive rich text editor. It includes a character counter and clearly labeled buttons for efficient review and submission.', componentName: 'modals-11', url: 'modals-11' }
  ];

  private readonly notificationBlockList: Block[] = [
    { name: 'Notification', title: 'Notifications Panel with Tab', description: 'In this demo, the notification panel lets users manage updates effectively with actions like "Accept" or "Deny". Categorized tabs, quick filters, and timestamps ensure users are always up to date on their latest notifications.', componentName: 'notification-1', url: 'notification-1' },
    { name: 'Notification', title: 'Notifications Panel with Progress Bar', description: 'In this demo, you can upload files, monitor their upload progress, cancel uploads in progress, and access notifications for group updates.', componentName: 'notification-2', url: 'notification-2' },
    { name: 'Notification', title: 'Notification Panel with Tabs and Chips', description: 'This demo showcases a messages and calls notification center. Switch between "Messages" and "Calls" to view notifications for each type of communication. Use the "All", "Unread", and "@Mentions" filters to organize your notifications in each category.', componentName: 'notification-3', url: 'notification-3' },
    { name: 'Notification', title: 'Toast Notification with Actions', description: 'In this demo, learn about feature updates from a notification that includes options to explore the updates now or check them out later.', componentName: 'notification-4', url: 'notification-4' },
    { name: 'Notification', title: 'Toast Notification', description: 'In this demo, view promotional notifications with personalized messages, special offers, and product images to encourage timely user actions.', componentName: 'notification-5', url: 'notification-5' },
    { name: 'Notification', title: 'Notification Sidebar with Tab', description: 'This demo showcases an advanced notification center that categorizes notifications into "All", "Focused", "Others", "@Mentioned", and "Watching" groups and provides interactive sorting, marking, and filtering tools.', componentName: 'notification-6', url: 'notification-6' },
    { name: 'Notification', title: 'Notification with Sidebar', description: 'In this demo, view transaction confirmations, alerts, and failures with time stamps and detailed links.', componentName: 'notification-7', url: 'notification-7' },
    { name: 'Notification', title: 'Message Notification with Dual Action Button', description: 'In this demo, a "Message sent" notification is displayed along with two action options.', componentName: 'notification-8', url: 'notification-8' },
    { name: 'Notification', title: 'Simple Notification', description: 'In this demo, a notification is displayed confirming email delivery with a visual indicator and text. The notification also includes an action option.', componentName: 'notification-9', url: 'notification-9' },
    { name: 'Notification', title: 'Alert Notification', description: 'In this demo, view an error alert and promptly take corrective action.', componentName: 'notification-10', url: 'notification-10' }
  ];

  private readonly aiCardBlockList: Block[] = [
    { name: 'AI Card', title: 'Subscription Upgrade Interface', description: 'In this demo, a card layout presents a call-to-action button for upgrading a subscription to an AI service.', componentName: 'ai-card-1', url: 'ai-card-1' },
    { name: 'AI Card', title: 'Visual Profile Card', description: 'In this demo, a card layout combines imagery and text to present a selection of landmarks. The layout emphasizes visuals and simple organization, creating an effective snapshot of key information.', componentName: 'ai-card-2', url: 'ai-card-2' },
    { name: 'AI Card', title: 'Feature Highlight Card ', description: 'In this demo, a series of cards use icons and text to succinctly convey individual features.', componentName: 'ai-card-3', url: 'ai-card-3' },
    { name: 'AI Card', title: 'Information Display Card', description: 'In this demo, a card layout combines imagery, titles, and text to deliver content clearly. It organizes elements to enhance visual appeal and readability, making information quickly accessible.', componentName: 'ai-card-4', url: 'ai-card-4' }
  ];

  private readonly aiChatBlockList: Block[] = [
    { name: 'AI Chat', title: 'Interactive AI Chat Interface', description: 'In this demo, an AI chat interface facilitates dynamic conversations by displaying prompts from users and AI responses in an instant-messaging-style layout. It incorporates action icons for feedback, sharing, and downloading, enhancing the interactivity and portability of the chat experience.', componentName: 'ai-chat-1', url: 'ai-chat-1' },
    { name: 'AI Chat', title: 'Visual AI Chat Interface', description: 'In this demo, an AI chat interface displays an exchange between a user and an AI service. Actions for providing feedback, downloading a response, and regenerating a response enhance interaction with the AI service and provide a comprehensive communication experience.', componentName: 'ai-chat-2', url: 'ai-chat-2' }
  ];

  private readonly aiDialogBlockList: Block[] = [
    { name: 'AI Dialog', title: 'Interactive AI Dialog Interface', description: 'In this demo, a dialog presents a multistep process for interacting with an AI service and provides tabs for easy navigation. It includes fields for text input and file uploads.', componentName: 'ai-dialog-1', url: 'ai-dialog-1' },
    { name: 'AI Dialog', title: 'Feedback Dialog Interface', description: 'In this demo, a dialog provides a set of common feedback options and a text area for detailed input. Its purpose is to gather user input for improvement through a streamlined design.', componentName: 'ai-dialog-2', url: 'ai-dialog-2' },
    { name: 'AI Dialog', title: 'Create Link Dialog Interface', description: 'In this demo, a dialog supports creating a public link for sharing specific conversational AI prompts and responses. It features selectable options for how much of the chat to share, a preview of the link, and a button to create the link.', componentName: 'ai-dialog-3', url: 'ai-dialog-3' }
  ];

  private readonly aiFaqBlockList: Block[] = [
    { name: 'AI FAQ', title: 'AI FAQ', description: 'In this demo, an accordion interface organizes commonly asked questions and their answers.', componentName: 'ai-faq-1', url: 'ai-faq-1' }
  ];

  private readonly aiFloatingWidgetBlockList: Block[] = [
    { name: 'AI Floating Widget', title: 'Responsive AI Chat Interface', description: 'In this demo, a floating chat interface provides quick access to a conversational AI. It includes options to start a new chat and close the chat and a text input field for users to submit their queries.', componentName: 'ai-floating-widget-1', url: 'ai-floating-widget-1' },
    { name: 'AI Floating Widget', title: 'Interactive Contact Us Form', description: 'In this demo, a floating form allows user to enter their name, contact information, and a message. It includes action buttons for attaching a file to the message, submitting the message, and closing the form.', componentName: 'ai-floating-widget-2', url: 'ai-floating-widget-2' },
    { name: 'AI Floating Widget', title: 'Streamlined Integration Settings Panel', description: 'In this demo, a floating settings panel provides an interface for configuring integration settings for external services like analytics and optimization tools. It features text fields and an upload option, delivering an easy configuration experience.', componentName: 'ai-floating-widget-3', url: 'ai-floating-widget-3' }
  ];

  private readonly aiInputBlockList: Block[] = [
    { name: 'AI Input', title: 'Compact Prompt Input Field', description: 'In this demo, it includes a text field for AI prompt input and an integrated action icon. The sleek design prioritizes simplicity.', componentName: 'ai-input-1', url: 'ai-input-1' },
    { name: 'AI Input', title: 'Enhanced Prompt Input', description: 'In this demo, a text field for AI prompt input is paired with options for refining entries. It offers quick access to various functions, emphasizing flexibility.', componentName: 'ai-input-2', url: 'ai-input-2' }
  ];

  private readonly aiLoginBlockList: Block[] = [
    { name: 'AI Login', title: 'AI Login and Create Account', description: 'In this demo, a login interface provides diverse options for accessing AI services, including social logins and a traditional login form. It also includes a tab where users can create an account, and a disclaimer where users can access the terms of service and privacy and cookie statement.', componentName: 'ai-login-1', url: 'ai-login-1' },
    { name: 'AI Login', title: 'Streamlined AI Login', description: 'In this demo, an AI login interface offers multiple authentication options, including social login and traditional credentials. It emphasizes simplicity and accessibility, ensuring a seamless entry point for accessing AI services.', componentName: 'ai-login-2', url: 'ai-login-2' }
  ];

  private readonly aiNotificationBlockList: Block[] = [
    { name: 'AI Notification', title: 'Responsive AI Chat Interface', description: 'In this demo, the AI notification provides clear feedback on a successful action using an icon and concise text.', componentName: 'ai-notification-1', url: 'ai-notification-1' }
  ];

  private readonly aiPricingTableBlockList: Block[] = [
    { name: 'AI Pricing Table', title: 'AI Subscription Pricing Table', description: 'In this demo, a pricing table uses a clear layout to facilitate comparison and decision-making.', componentName: 'ai-pricing-table-1', url: 'ai-pricing-table-1' }
  ];

  private readonly aiPromptCardBlockList: Block[] = [
    { name: 'AI Prompt Card', title: 'Informative Prompt Card - 1', description: 'In this demo, a series of cards provides different options for selecting the type of content an AI service should generate. Each card includes a title and an icon. This streamlined layout prioritizes key information to facilitate efficient interaction.', componentName: 'ai-prompt-card-1', url: 'ai-prompt-card-1' },
    { name: 'AI Prompt Card', title: 'Informative Prompt Card - 2', description: 'In this demo, cards display a title and brief description of saved AI prompts. Each card includes a bookmark icon and the number of times that the prompt has been used. Its grid-based layout ensures readability and efficient user interaction.', componentName: 'ai-prompt-card-2', url: 'ai-prompt-card-2' },
    { name: 'AI Prompt Card', title: 'Compact Prompt Card', description: 'In this demo, cards feature an icon, title, and concise description of an AI prompt in a compact layout. It organizes essential details for quick recognition and efficient interaction.', componentName: 'ai-prompt-card-3', url: 'ai-prompt-card-3' },
    { name: 'AI Prompt Card', title: 'Visual Prompt Card', description: 'In this demo, prompt cards combine an image with a title and brief description. This design emphasizes visual appeal and clarity, organizing content to capture the user’s attention effectively.', componentName: 'ai-prompt-card-4', url: 'ai-prompt-card-4' }
  ];

  private readonly aiSearchBlockList: Block[] = [
    { name: 'AI Search', title: 'No-Results Search Interface', description: 'In this demo, an AI search module displays a clear notification that no results are found, with suggestions to refine the search or start a new one. It focuses on providing guidance and maintaining user engagement despite a lack of matches.', componentName: 'ai-search-1', url: 'ai-search-1' },
    { name: 'AI Search', title: 'Comprehensive Search Results Interface', description: 'In this demo, the AI-assisted search module organizes results into categories like team, files, and projects. It provides a tabbed layout to enhance navigation and quick access to specific information, optimizing search efficiency.', componentName: 'ai-search-2', url: 'ai-search-2' }
  ];

  private readonly aiSettingBlockList: Block[] = [
    { name: 'AI Setting', title: 'Comprehensive AI Settings', description: 'In this demo, categories of AI configuration options are listed in a pane on the left and the options associated with the selected category are listed in a pane on the right. The options are paired with toggles, dropdowns, and buttons for easy modification. This design provides a user-friendly layout for adjusting preferences, enhancing control and customization of the AI service user experience.', componentName: 'ai-setting-1', url: 'ai-setting-1' },
    { name: 'AI Setting', title: 'Personalized AI Settings Interface', description: 'In this demo, user profile personalization for an AI service is facilitated through editable fields and toggle options.', componentName: 'ai-setting-2', url: 'ai-setting-2' }
  ];

  private readonly aiSidebarBlockList: Block[] = [
    { name: 'AI Sidebar', title: 'AI Sidebar Navigation', description: 'In this demo, a sidebar facilitates navigation to AI-powered parts of an application, such as prompt submission and conversational AI modules. It provides clear organization and visual cues to enhance accessibility and streamline the application navigation experience.', componentName: 'ai-sidebar-1', url: 'ai-sidebar-1' },
    { name: 'AI Sidebar', title: 'AI Sidebar for Chats', description: 'In this demo, a sidebar facilitates quick access to recent conversations with conversational AIs, chatbots, or personal digital assistants. It organizes chats chronologically for easy reference and includes action buttons for starting new chats, accessing chat settings, and more.', componentName: 'ai-sidebar-2', url: 'ai-sidebar-2' },
    { name: 'AI Sidebar', title: 'AI Chat Sidebar with Two Columns', description: 'In this demo, a sidebar layout features a search bar, categorized navigation icons, and a structured list displaying items with timestamps. The clean design ensures easy navigation and accessibility.', componentName: 'ai-sidebar-3', url: 'ai-sidebar-3' },
    { name: 'AI Sidebar', title: 'Interactive AI Sidebar Navigation', description: 'In this demo, the sidebar features a structured list layout with a search bar and contextual options for managing chat history. The interface ensures smooth navigation and quick access to pinned items.', componentName: 'ai-sidebar-4', url: 'ai-sidebar-4' },
    { name: 'AI Sidebar', title: 'Generative AI Search History Side Panel', description: 'In this demo, a side panel lists the most recent prompts submitted to a generative AI system. Each prompt is paired with a checkbox for selection. The top of the panel provides a delete option.', componentName: 'ai-sidebar-5', url: 'ai-sidebar-5' }
  ];

  private readonly distributionChartBlockList: Block[] = [
    { name: 'Distribution Chart', title: 'Expense Analysis Doughnut Chart', description: 'In this demo, a doughnut chart illustrates a weeks expense distribution across different categories. The central figure is the total expenses and percentage change. An action button on the top-right allows access to more detailed data analysis. The legend on the right clearly identifies each expense category by color for quick reference and understanding.', componentName: 'distribution-chart-1', url: 'distribution-chart-1' },
    { name: 'Distribution Chart', title: 'Segment Analysis with Doughnut Chart', description: 'In this demo, the doughnut chart presents a spending analysis broken down by categories. A group button above the chart allows time frame filtering, while the legend on the right links each color segment to its respective category. An action button enables the execution of an integrated function.', componentName: 'distribution-chart-2', url: 'distribution-chart-2' },
    { name: 'Distribution Chart', title: 'Circular and Data Overview Chart', description: 'In this demo, a circular chart provides a stock performance overview with a group button for filtering. Detailed insights appear on the right, along with an action button for execution.', componentName: 'distribution-chart-3', url: 'distribution-chart-3' },
    { name: 'Distribution Chart', title: 'Segmented Pie Chart Visualization', description: 'In this demo, a pie chart displays the market share of major browsers. A dropdown filter for the year and a refresh button are available at the top. Smart labels are positioned around the chart for ease of reference.', componentName: 'distribution-chart-4', url: 'distribution-chart-4' }
  ];

  private readonly barChartBlockList: Block[] = [
    { name: 'Bar Chart', title: 'Revenue Analysis Bar Chart', description: 'In this demo, a bar chart highlights revenue trends. An action button in the top-right corner allows users to refine chart details.', componentName: 'bar-chart-1', url: 'bar-chart-1' },
    { name: 'Bar Chart', title: 'Expense Tracking with Dual Charts', description: 'In this demo, the layout features a bar chart on the left and a doughnut chart on the right to visualize expense details. An action button in the top-right provides additional functionalities, while legends are positioned under the bar chart for color identification.', componentName: 'bar-chart-2', url: 'bar-chart-2' },
    { name: 'Bar Chart', title: 'Bar Chart with Filters and Actions', description: 'In this demo, the chart displays weather data. Segmented and dropdown filter options are placed on the right for data refinement, and an action button at the top-right enables the execution of an integrated function.', componentName: 'bar-chart-3', url: 'bar-chart-3' },
    { name: 'Bar Chart', title: 'Sales Overview Bar Chart', description: 'In this demo, a bar chart highlights a weeks sales performance. The top section displays sales revenue compared to the previous week. An action button at the top-right enables the execution of an integrated function. A tooltip provides exact numbers, while the legend on the right helps define the colors.', componentName: 'bar-chart-4', url: 'bar-chart-4' },
    { name: 'Bar Chart', title: 'Dual-Axis Bar and Line Chart', description: 'In this demo, a combo chart displays data with bars and a line. At the top-right is a dropdown for filtering and an action button enables the execution of an integrated function. A legend at the top identifies the data.', componentName: 'bar-chart-5', url: 'bar-chart-5' },
    { name: 'Bar Chart', title: 'Activity Bar Chart', description: 'In this demo, the bar chart visually represents data with interactive dropdown filters in the top-right corner. Legends at the bottom provide clear differentiation of data categories for analysis.', componentName: 'bar-chart-6', url: 'bar-chart-6' },
    { name: 'Bar Chart', title: 'Seasonal Bar Chart Visualization', description: 'In this demo, a bar chart illustrates monthly weather trends, with dropdown filters located at the top-right for year and location selection. Different colors effectively represent various temperature ranges, identified in the legend at the bottom.', componentName: 'bar-chart-7', url: 'bar-chart-7' },
    { name: 'Bar Chart', title: 'Asset Distribution Bar Chart with Growth Percentage', description: 'In this demo, a summary shows total profits saved with a growth percentage. A progress bar illustrates asset distribution among categories. Action Button is available at the top-right for further information.', componentName: 'bar-chart-8', url: 'bar-chart-8' },
    { name: 'Bar Chart', title: 'Cylinder Bar Chart for Trend Visualization', description: 'In this demo, a 3D bar chart showcases Olympic medal trends by country, with location details displayed below the title. At the top-right corner, a dropdown allows data filtering, and an action button enables the execution of an integrated function.', componentName: 'bar-chart-9', url: 'bar-chart-9' }
  ];

  private readonly lineChartBlockList: Block[] = [
    { name: 'Line Chart', title: 'Annual Revenue Line Chart', description: 'In this demo, the line chart presents monthly revenue data for a selected year, featuring interactive elements like tooltips that show specific revenue figures and monthly percentage changes. A dropdown menu in the top-right enables year selection, while an action button offers access to detailed financial reports for comprehensive analysis.', componentName: 'line-chart-1', url: 'line-chart-1' },
    { name: 'Line Chart', title: 'Comprehensive Rainfall Trend Analysis', description: 'In this demo, the chart displays rainfall trends over a decade, using distinct colors for different years. Interactive data points provide precise numbers on hovering over them in the form of a tooltip. Users can select measurement units and download reports for further analysis.', componentName: 'line-chart-2', url: 'line-chart-2' },
    { name: 'Line Chart', title: 'Currency Exchange Rate Analysis', description: 'In this demo, four line graphs display exchange rate trends for different currency pairs. Each graph is distinctly colored to differentiate data. A set of buttons allows users to select various time frames, enhancing the ability to analyze trends over days, weeks, months, or years.', componentName: 'line-chart-3', url: 'line-chart-3' },
    { name: 'Line Chart', title: 'Transaction Trends Line Chart', description: 'In this demo, a line chart tracks transaction activity over time. A date filter are placed above the chart, enabling timeframe adjustments. Interactive tooltips display information about specific data points when they are hovered over, and a menu button at the top-right provides options.', componentName: 'line-chart-4', url: 'line-chart-4' },
    { name: 'Line Chart', title: 'Interactive Revenue Insights Graph', description: 'In this demo, a line chart presents fluctuating revenue data over the course of a year, with gradient colors enhancing visual appeal. Hover interactions reveal detailed values. Timeframe buttons allow users to customize the view, and a report button offers additional analysis.', componentName: 'line-chart-5', url: 'line-chart-5' },
    { name: 'Line Chart', title: 'Financial Line Chart', description: 'In this demo, the line chart illustrates a businesses financial state over time for easy analysis. Controls for selecting time ranges are located at the top-right. A tooltip appears on hovering over the lines to provide detailed data, while the chart legend is situated at the top-left to clearly distinguish between revenue and expenditures.', componentName: 'line-chart-6', url: 'line-chart-6' },
    { name: 'Line Chart', title: 'Stock Performance Line Chart', description: 'In this demo, a line chart illustrates stock price movements over time. Users can toggle between time frames with buttons and switch chart types via a dropdown menu. Interactive tooltips provide detailed data on hovering over the line, and action buttons allow for buying or selling.', componentName: 'line-chart-7', url: 'line-chart-7' },
    { name: 'Line Chart', title: 'Sales Revenue Line Chart', description: 'In this demo, the line chart depicts sales revenue trends. Users can toggle among time frames using the options above the chart. Interactive tooltips present specific revenue figures. Additional controls in the top-right corner enable data refresh and provide access to more options.', componentName: 'line-chart-8', url: 'line-chart-8' },
    { name: 'Line Chart', title: 'Sales Growth Analysis Line Chart', description: 'In this demo, the line chart tracks sales performance over the past month. Users can adjust the time frame using the dropdown menu. Interactive tooltips offer specific figures for sales growth and projections, enhancing analytical insights.', componentName: 'line-chart-9', url: 'line-chart-9' },
    { name: 'Line Chart', title: 'Progress Line Chart Visualization', description: 'In this demo, a line chart displays a sales overview with actual and ideal progress. An action button is at the top-right, and a dropdown allows month selection. The chart provides comparisons between the actual and ideal progress.', componentName: 'line-chart-10', url: 'line-chart-10' },
    { name: 'Line Chart', title: 'Dynamic Weather Visualization', description: 'In this demo, a line graph presents temperature variations in a week. Interactive data points reveal additional information on hovering over them in the form of a tooltip. Timeframe options are provided through buttons, allowing users to customize the view as needed.', componentName: 'line-chart-11', url: 'line-chart-11' }
  ];

  private readonly areaChartBlockList: Block[] = [
    { name: 'Area Chart', title: 'Dual Data Set Area Chart', description: 'In this demo, the chart presents two lines displaying financial data over a week, visually differentiated by color. Users can toggle between various time frames using buttons, and a report can be viewed at the top.', componentName: 'area-chart-1', url: 'area-chart-1' },
    { name: 'Area Chart', title: 'KPI Monitoring Gradient Bar Chart', description: 'In this demo, the chart displays key performance metrics from the last six months. Hover effects reveal detailed values and percent of change. The interface includes a dropdown to modify the data time frame.', componentName: 'area-chart-2', url: 'area-chart-2' },
    { name: 'Area Chart', title: 'Investment Growth Trend Chart', description: 'In this demo, the line chart highlights the yearly growth of different investments, visually separated by color. Interactive elements provide in-depth information on hovering over a line, and users can toggle between categories using segmented buttons for targeted analysis.', componentName: 'area-chart-3', url: 'area-chart-3' },
    { name: 'Area Chart', title: 'Visitor Analysis Area Chart', description: 'In this demo, the area chart illustrates visitor trends over the year. Users can filter the data with dropdown menus. Interactive tooltips offer details, enabling analysis of trends across time.', componentName: 'area-chart-4', url: 'area-chart-4' },
    { name: 'Area Chart', title: 'Stacked Area Chart for Sales Trend Comparison', description: 'In this demo, the stacked area chart illustrates sales trends for three products over a year, with each section colored distinctly. A dropdown menu allows users to select different years for comparison. The layout emphasizes cumulative data changes across months.', componentName: 'area-chart-5', url: 'area-chart-5' },
    { name: 'Area Chart', title: 'Comparative Line Graph Overview', description: 'In this demo, a line chart displays weekly revenue analysis. The current weeks performance is highlighted with specific values, and a dropdown at the top-right allows time frame selection. The chart allows insights into revenue trends.', componentName: 'area-chart-6', url: 'area-chart-6' },
    { name: 'Area Chart', title: 'Smooth Comparison Graph', description: 'In this demo, an area chart displays a monthly weather analysis. Tabs allow switching among temperature, precipitation, humidity, and wind data. Dropdowns at the top-right enable date and view selection. The chart visually highlights variations over time.', componentName: 'area-chart-7', url: 'area-chart-7' },
    { name: 'Area Chart', title: 'Shaded Area Chart Overview', description: 'In this demo, a shaded area chart displays temperature fluctuations over the year. A dropdown allows location selection, while another control lets users choose the year. A report button offers a more detailed analysis.', componentName: 'area-chart-8', url: 'area-chart-8' },
    { name: 'Area Chart', title: 'Multi-Line Chart for Detailed Trend Analysis', description: 'In this demo, a line chart displays an expense analysis for a family in 2024broken down by family member. A dropdown for year selection and the action button are at the top-right. The chart includes color-coded lines for each person, providing detailed spending data.', componentName: 'area-chart-9', url: 'area-chart-9' }
  ];

  private readonly bubbleChartBlockList: Block[] = [
    { name: 'Bubble Chart', title: 'Expense Analysis Bubble Chart', description: 'In this demo, a bubble chart shows a weeks expenses by category. Each bubbles size reflects the amount spent. A top-right button offers further analysis, and the bottom legend links colors to categories for easy identification.', componentName: 'bubble-chart-1', url: 'bubble-chart-1' }
  ];

  private readonly scatterChartBlockList: Block[] = [
    { name: 'Scatter Chart', title: 'Product Performance Scatter Plot', description: 'In this demo, the scatter plot visualizes relationships between product sales and customer satisfaction scores, with distinct symbols representing different categories. A dropdown menu allows users to filter data by year, while a report button provides detailed insights.', componentName: 'scatter-chart-1', url: 'scatter-chart-1' }
  ];

  private readonly ratingBlockList: Block[] = [
    { name: 'Rating', title: 'Default User Rating', description: 'In this demo, the Rating UI block showcases an average score with star ratings and the total number of ratings, providing a quick overview of customer feedback.', componentName: 'rating-1', url: 'rating-1' },
    { name: 'Rating', title: 'Rating Overview with Branding', description: 'In this demo, the Rating UI block provides a snapshot of customer feedback, featuring an average rating, total number of ratings, and a brand logo for clear identification.', componentName: 'rating-2', url: 'rating-2' },
    { name: 'Rating', title: 'Rating Overview with Brand', description: 'In this demo, the Rating UI displays user feedback with a profile section, star rating, review section, and action buttons for better user interaction. It includes key recommendations.', componentName: 'rating-3', url: 'rating-3' },
    { name: 'Rating', title: 'User Rating with Social Sharing', description: 'In this demo, users can rate their experience with a simple star rating system. Social sharing options allow users to share their feedback on different platforms, enhancing engagement and visibility.', componentName: 'rating-4', url: 'rating-4' },
    { name: 'Rating', title: 'User Feedback and Rating Submission', description: 'In this demo, users can rate their experience using a simple selection system with numbered rating options from 1 to 5. A dedicated button allows for easy submission, ensuring that feedback is collected efficiently.', componentName: 'rating-5', url: 'rating-5' },
    { name: 'Rating', title: 'Emoji-Based Experience Rating', description: 'In this demo, users can rate their experience using an emoji-based rating system. The interface presents three expressive icons for quick and intuitive feedback submission. This visual approach enhances engagement and simplifies the feedback process.', componentName: 'rating-6', url: 'rating-6' },
    { name: 'Rating', title: 'Quick Feedback System with Thumb Action Buttons', description: 'In this demo, users can express their satisfaction through a thumbs-up or thumbs-down rating using labeled buttons. This simple interaction enables quick feedback collection.', componentName: 'rating-7', url: 'rating-7' },
    { name: 'Rating', title: 'User Rating Card with Profile and Stars', description: 'In this demo, a user rating card displays a profile picture, username, user handle, and a star-based rating system with a numerical score. It also includes a verification badge and a bookmark icon for saving the review.', componentName: 'rating-8', url: 'rating-8' },
    { name: 'Rating', title: 'Customer Reviews Summary', description: 'In this demo, the rating UI block presents an overview of customer feedback, including the average rating, total number of reviews, and a visual breakdown of ratings across different star levels.', componentName: 'rating-9', url: 'rating-9' },
    { name: 'Rating', title: 'Detailed Customer Reviews and Ratings', description: 'In this demo, the Rating UI block showcases detailed customer feedback with individual category ratings and written reviews. This provides a look at user satisfaction and platform performance.', componentName: 'rating-10', url: 'rating-10' },
    { name: 'Rating', title: 'Rating Summary with Category Breakdown Shorten', description: 'In this demo, the rating summary UI displays an overall score alongside individual category ratings, allowing users to assess key aspects at a glance. A call-to-action enables users to explore more detailed ratings for deeper insights.', componentName: 'rating-11', url: 'rating-11' },
    { name: 'Rating', title: 'Rating Summary with Category Breakdown', description: 'In this demo, the rating summary UI displays an overall score alongside individual category ratings, allowing users to assess key aspects at a glance. A call-to-action enables users to explore more detailed ratings for deeper insights.', componentName: 'rating-12', url: 'rating-12' },
    { name: 'Rating', title: 'User Rating with Labeled Feedback Options', description: 'In this demo, users can rate their experience using a simple selection system with labeled feedback options. The labeled star ratings elicit clear feedback, allowing responses to be collected efficiently.', componentName: 'rating-13', url: 'rating-13' },
    { name: 'Rating', title: 'Product Rating and Review Submission', description: 'In this demo, users can provide a rating for a product using a labeled, star-based system. A button allows users to submit their reviews, while an interactive link enables them to explore existing reviews, offering insights from other users to aid in their decision-making.', componentName: 'rating-14', url: 'rating-14' },
    { name: 'Rating', title: 'Customer Satisfaction Rating with Emoji and Review Submission', description: 'In this demo, users can rate their satisfaction using an emoji-based feedback system with labeled categories. A text input field allows users to provide additional feedback. An action button ensures easy submission, streamlining the feedback collection process.', componentName: 'rating-15', url: 'rating-15' },
    { name: 'Rating', title: 'User Feedback Modal with Interactive Ratings', description: 'In this demo, users can rate their experience using emoji-based feedback modal and provide additional comments. The interactive UI allows for a quick and engaging review process, helping enhance the user.', componentName: 'rating-16', url: 'rating-16' },
    { name: 'Rating', title: 'User Rating Modal with Input Field', description: 'In this demo, the modal interface allows users to share their feedback by selecting a star rating, specifying a feature, and adding optional comments. The inclusion of a checkbox offers privacy, while intuitive action buttons streamline the submission process.', componentName: 'rating-17', url: 'rating-17' }
  ];

  private readonly blockList: BlockList[] = [
    { name: 'Header', description: 'Page headers provide a structured layout for efficient navigation and interaction. Their key features include breadcrumbs, tabs for categorization, buttons for quick access to common actions, and filters to refine displayed data. Their design ensures clarity, intuitive usability, and seamless functionality across various contexts.', category: 'Layouts', url: 'header', subBlockList: this.headerBlockList },
    { name: 'Navigation Bar', description: 'The navigation bar is a user interface element that provides links or buttons to different sections or pages. Typically located at the top of the application, it allows users to easily navigate between sections or pages. The navigation bar may also include menus, icons, or dropdowns, further enhancing the usability and accessibility of the application.', category: 'Layouts', url: 'navigation-bar', subBlockList: this.navbarBlockList },
    { name: 'Sidebar', description: 'In this section, we will explore the sidebar and nested sidebar components, which serve purposes such as displaying lists, accordion menus, notifications, and user profiles. They also facilitate seamless profile switching and quick access to application settings and other actions. The nested sidebar supports hierarchical navigation, making it ideal for applications with complex structures. In it, subcategories and options can be easily accessed without cluttering the interface.', category: 'Layouts', url: 'sidebar', subBlockList: this.sidebarBlockList },
    { name: 'Search', description: 'The search box allows users to enter keywords or phrases to filter and display relevant results from a list. Based on the input, the system dynamically narrows down the options. If no matches are found, a "no records found" message is shown. This enhances the efficiency of finding specific information quickly.', category: 'Layouts', url: 'search', subBlockList: this.searchBlockList },
    { name: 'Grid', description: 'The grid is a powerful and flexible layout system that arranges content in rows and columns, ensuring structure, alignment, and visual clarity. It enables developers to display data in an intuitive tabular format, where each row represents an individual item and columns offer detailed information. With built-in support for sorting, filtering, and efficient content management, this layout adapts seamlessly to various data types, delivering a streamlined, user-friendly experience.', category: 'Layouts', url: 'grid', subBlockList: this.gridBlockList },
    { name: 'List View', description: 'The list view is a display format used in web applications where items such as text, images, or data are organized vertically in one or more columns for easy browsing. Each item is presented as a row, allowing users to view key details at a glance. This format is commonly used for displaying files, products, or records in an organized and accessible way, making it easier for users to find and interact with content.', category: 'Layouts', url: 'list-view', subBlockList: this.listBlockList },
    { name: 'Statistics', description: 'The statistics blocks in these demos provide a clear and structured view of key performance indicators, enabling users to interpret and analyze data. Each metric is displayed with labels, trend indicators, and supporting icons for quick understanding. The layout is organized for clarity, allowing users to measure progress, spot patterns, and make informed decisions. With percentage changes and time-based comparisons, each metric offers insights for optimizing performance.', category: 'Layouts', url: 'statistics', subBlockList: this.statisticsBlockList },
    { name: 'Cards', description: 'The card is a flexible and compact UI element used to present content in a clear and organized way. Typically consisting of a container that holds a combination of text, images, icons, links, and other elements, cards are commonly used to display discrete pieces of content, such as articles, products, or user profiles. They are often interactive, allowing for actions like expanding, clicking, or navigating to other content. Widely used in dashboards, content galleries, and e-commerce sites, cards provide an intuitive and modular way to organize and present information.', category: 'Layouts', url: 'cards', subBlockList: this.cardsBlockList },
    { name: 'Filter Panel', description: 'A filter block is a user interface element designed to refine search results or data views through a structured layout. It features dropdown menus, sliders, toggles, and input fields, and facilitates easy customization. The design prioritizes clarity, efficiency, and a seamless user experience, ensuring users can quickly and intuitively narrow down selections.', category: 'Layouts', url: 'filter-panel', subBlockList: this.filterPanelBlockList },
    { name: 'Tile View', description: 'The tile view is a user interface design pattern that displays content in distinct rectangular tiles. Each tile represents an individual item, such as a task, product, or event, and typically includes key information like title, status, and relevant details. This layout allows users to scan and interact easily with multiple items at once, improving organization and accessibility. The tile view enhances visual clarity by providing a structured and engaging way to manage and explore content efficiently.', category: 'Layouts', url: 'tile-view', subBlockList: this.tileViewBlockList },
    { name: 'Modals', description: 'The modal dialog is a user interface element designed to perform specific tasks or actions through a focused layout. It includes input fields, dropdown menus, toggles, date pickers, and call-to-action buttons. It presents a clean and intuitive user experience. The design emphasizes clarity, usability, and consistency.', category: 'Layouts', url: 'modals', subBlockList: this.modalsBlockList },
    { name: 'Floating Menu', description: 'The floating menu is a flexible UI element that provides quick, on-demand access to key features without interrupting the user workflow. Positioned for easy reach, it offers a compact and intuitive interface, enabling smooth interaction with essential tools and actions to enhance navigation and the overall user experience.', category: 'Layouts', url: 'floating-menu', subBlockList: this.floatingMenuBlockList },
    { name: 'Notification', description: 'A notification center is a central hub designed to help users manage alerts and updates. With categorized tabs for easy organization, filters to refine notifications, and a user-friendly layout, it ensures a seamless and efficient experience tailored to meet diverse needs', category: 'Layouts', url: 'notification', subBlockList: this.notificationBlockList },
    { name: 'Calendar', description: 'The calendar provides an organized, user-friendly view of dates, events, and tasks, making it easy to manage schedules. With features like date selection, agenda and to-do lists, timeline views, and customizable filters, users can quickly navigate their calendars and stay on top of important appointments and deadlines. Interactive action buttons for adding events, setting reminders, and marking tasks complete further enhance usability, ensuring a seamless experience for planning and managing daily activities.', category: 'Layouts', url: 'calendar', subBlockList: this.calendarBlockList },
    { name: 'Rating', description: 'The Rating interface is a modular and reusable UI component. It is designed for clarity, intuitive interaction, and consistent behavior across devices. These blocks enhance user experience by making rating input simple, responsive, and visually engaging. They seamlessly integrate with other UI elements to maintain a cohesive design. The interface supports different layout types.', category: 'Layouts', url: 'rating', subBlockList: this.ratingBlockList },
    { name: 'Pagination', description: 'Pagination is a design technique used in web applications to break large volumes of content into smaller, more navigable sections. It typically includes navigation features such as page numbers, "Next" and "Previous" buttons, the ability to directly enter a page number via a numeric textbox, and sometimes a page selector or options for adjusting the number of items displayed per page. By presenting content in smaller chunks, pagination enhances the user experience, making it easier to browse and find relevant information without overwhelming users with excessive content at once.', category: 'Layouts', url: 'pagination', subBlockList: this.paginationBlockList },
    { name: 'Footer', description: 'The footer is a section at the bottom of a web application, typically containing elements such as the brand logo and name, copyright notices, privacy policies, a sitemap, contact information, and sometimes social media buttons or additional options. A footer is designed to improve navigation and provide easy access to important information without cluttering the main content of the page.', category: 'Layouts', url: 'footer', subBlockList: this.footerBlockList },
    { name: 'Sign In', description: 'A sign-in process allows users to enter their credentials, typically an email address and password, to access an application. It often includes additional options to remember login details for future convenience, provides a way to recover forgotten passwords, and offers the ability to sign up. Additionally, third-party sign-in options, such as Google and Microsoft, provide greater flexibility and facilitate new user registration, ensuring a smooth onboarding experience.', category: 'Authentication', url: 'signin', subBlockList: this.signinBlockList },
    { name: 'Sign Up', description: 'Signing up is the process by which users create a new account to access an application. It typically involves providing personal information, such as a name and email address, and setting a password. Users may also be required to agree to terms of service and privacy policies to ensure compliance. To make the process more convenient, many platforms offer alternate sign-up options through social media accounts like Google, Facebook, or Microsoft, allowing users to register quickly without having to fill out detailed forms. The sign-up process is essential for enabling access to personalized content and features, while also ensuring the security and privacy of user data.', category: 'Authentication', url: 'signup', subBlockList: this.signupBlockList },
    { name: 'Sign In - Mobile', description: 'This block allows users to log into an application using their mobile number instead of a traditional username or email. Users begin by selecting their country code from a dropdown menu and then enter their mobile number into an input field. They select the Continue button to submit the form and initiate the login process.', category: 'Authentication', url: 'mobile-signin', subBlockList: this.signinMobileBlockList },
    { name: 'Sign In - OTP', description: 'OTP (one-time password) is a secure authentication method that allows users to log into an application by entering a temporary code sent to their registered mobile phone number. The OTP is sent via SMS. Once the user receives the OTP, they enter it into the input field, and a Continue button submits the form, completing the login process. This method ensures a high level of security by verifying the users identity through a unique, time-sensitive code, offering a safe authentication experience.', category: 'Authentication', url: 'otp-signin', subBlockList: this.signinOTPBlockList },
    { name: 'Forgot Password', description: 'The forgot password process allows users to recover access to their account if they have forgotten their login credentials. Users are prompted to enter their registered email address, and a secure, time-sensitive link is sent to their inbox. Clicking the link directs users to a page where they can create a new password, ensuring that only the rightful account holder can regain access. The process is designed with clear guidance to make resetting credentials simple and straightforward.', category: 'Authentication', url: 'forgot-password', subBlockList: this.forgotPasswordBlockList },
    { name: 'Sign Out', description: 'The sign-out process allows users to end their session in an app securely. Upon logging out, users receive immediate confirmation of the successful sign-out, reassuring them that the process was successful.', category: 'Authentication', url: 'signout', subBlockList: this.signoutBlockList },
    { name: 'Unlock Session', description: 'The unlock session process allows users to regain access to their account if their session has been locked or expired. To begin, users are prompted to enter their registered email address, and a secure, time-sensitive link is sent to their inbox. Clicking the link directs users to a page where they can verify their identity and resume their session, ensuring a secure and seamless user experience.', category: 'Authentication', url: 'unlock-session', subBlockList: this.unlockSessionBlockList },
    { name: 'Pricing Card', description: 'Pricing cards are visual elements that present subscription plans or pricing tiers in a clear, comparative layout. They allow users to evaluate key features, benefits, and costs of each option. Typically featuring toggle switches and prominent call-to-action buttons, pricing cards offer a simple, user-friendly interface to guide users toward the option best for their needs.', category: 'E-commerce', url: 'pricing-card', subBlockList: this.pricingCardBlockList },
    { name: 'Plan and Price Comparison', description: 'A pricing plan comparison table offers a clean, user-friendly layout that allows users to evaluate different options. Users can quickly compare key features and pricing, helping them select the plan that best meets their needs. Benefits are clearly displayed side by side for easy comparison, while prominent call-to-action (CTA) buttons guide users to make their choice, ensuring a smooth and efficient experience.', category: 'E-commerce', url: 'plan-and-price-comparison', subBlockList: this.planComparisonBlockList },
    { name: 'Checkout Page', description: 'The checkout page is the final step in the online shopping process, where customers complete their purchase. It typically includes fields for entering customer details, billing information, shipping address, and payment options. The page provides a clear and concise order summary, displaying items, quantities, and pricing to confirm the purchase. With a user-friendly and intuitive design, the checkout page guides customers through the necessary steps to complete their order, ensuring a smooth and secure transaction.', category: 'E-commerce', url: 'checkout-page', subBlockList: this.checkoutBlockList },
    { name: 'Product Return Page', description: 'A product return page provides a process for returning items purchased online. Customers can select the products they wish to return, choose a return reason, and if applicable, opt for a pickup service. A return page with a refund option is available, and once the return is initiated, users receive a confirmation message, ensuring a smooth and transparent experience.', category: 'E-commerce', url: 'product-return-page', subBlockList: this.returnsBlockList },
    { name: 'Email', description: 'E-mail (electronic mail) allows users to send and receive messages over the internet. It includes features like recipient addresses, carbon copy, subject lines, message bodies, and file attachments. Widely used for both personal and professional communication, e-mail supports file sharing, organization, and formatting. It can be accessed through desktop clients, web services, or mobile apps.', category: 'Communication', url: 'email', subBlockList: this.emailBlockList },
    { name: 'Chat', description: 'Messaging platforms are crucial for real-time communication, offering a quick and interactive way to send and receive messages. Modern chat layouts include features like message input, timestamps, and real-time notifications to enhance user experience. These systems can be designed as simple interfaces or more complex side-panel integrations, allowing seamless multitasking. Accessibility features, such as language translation, further improve usability for diverse users.', category: 'Communication', url: 'chat', subBlockList: this.chatBlockList },
    { name: 'AI Login', description: 'The AI login UI block provides secure and streamlined user authentication. It includes components like input fields and buttons to facilitate user interaction. These blocks protect user data during login.', category: 'AI', url: 'ai-login', subBlockList: this.aiLoginBlockList },
    { name: 'AI Sidebar', description: 'The AI sidebar consists of interactive controls like sliders, dropdowns, and switches, arranged for quick customization. Nested sections support expandable lists and group settings. It allows users to access categories and subcategories without visual overload. Accordion-like behavior enhances clarity in dense control sets. This option is ideal for scalable control panels.', category: 'AI', url: 'ai-sidebar', subBlockList: this.aiSidebarBlockList },
    { name: 'AI Setting', description: 'The AI settings UI block provides configurable options for AI features. It uses components like toggles, sliders, dropdowns, and input fields to offer users intuitive management of AI behaviors.', category: 'AI', url: 'ai-setting', subBlockList: this.aiSettingBlockList },
    { name: 'AI Search', description: 'The AI search UI block enables intelligent, context-aware search functionality. A search box, list box, filters, auto-suggestions, and result cards work together to provide fast, accurate results by leveraging AI capabilities.', category: 'AI', url: 'ai-search', subBlockList: this.aiSearchBlockList },
    { name: 'AI Input', description: 'The AI input block allows users to enter data or queries with intelligent assistance. It supports features like auto-complete, error detection, and context-aware suggestions. The block is useful for chatbots, search fields, and form inputs enhanced by AI capabilities.', category: 'AI', url: 'ai-input', subBlockList: this.aiInputBlockList },
    { name: 'AI Card', description: 'The AI cards use components like Avatar, Button, and Badge to display insights, statuses, and actions in a compact, interactive format. They summarize AI-driven outputs, recommendations, or user interactions. The design focuses on clarity, quick scanning, and seamless user engagement. These cards help users make informed decisions.', category: 'AI', url: 'ai-card', subBlockList: this.aiCardBlockList },
    { name: 'AI Prompt Card', description: 'The AI prompt card uses images and icons to visually engage users. It presents suggested prompts or actions clearly and attractively. It guides users through AI-powered workflows and decision-making.', category: 'AI', url: 'ai-prompt-card', subBlockList: this.aiPromptCardBlockList },
    { name: 'AI Chat', description: 'The AI chat block enables real-time, intelligent conversations between users and artificial intelligence for virtual assistants. It uses components like Input Box, Avatar, Chips, and Card. It was designed to understand natural language and provide relevant, context-aware responses.', category: 'AI', url: 'ai-chat', subBlockList: this.aiChatBlockList },
    { name: 'AI Dialog', description: 'The AI dialog block facilitates interactive conversations between users and AI. It supports multistep inputs and actions through components like buttons and steppers. It was designed to guide users through complex workflows or data collection.', category: 'AI', url: 'ai-dialog', subBlockList: this.aiDialogBlockList },
    { name: 'AI Floating Widget', description: 'The AI floating widget offers quick access to AI-powered tools, keeping essential features within easy reach without interrupting the main interface. Its design includes a floating action button that expands into a compact menu, allowing users to effortlessly select and activate various AI functionalities with minimal disruption to their workflow.', category: 'AI', url: 'ai-floating-widget', subBlockList: this.aiFloatingWidgetBlockList },
    { name: 'AI Notification', description: 'AI notification displays alerts with icons, brief descriptions, and close controls for user interaction. Notifications are organized in a clean vertical layout that allows easy grouping and navigation. It supports the timely dismissal of alerts, and each notification can include action buttons for quick responses or further details. The system also adheres to accessibility standards to ensure usability for all users.', category: 'AI', url: 'ai-notification', subBlockList: this.aiNotificationBlockList },
    { name: 'AI FAQ', description: 'The AI FAQ block provides a page of automated answers to common questions using natural language processing. It uses an accordion, search box, and tags for easy navigation. FAQ pages reduce a support teams workload by offering quick, accurate answers to common questions.', category: 'AI', url: 'ai-faq', subBlockList: this.aiFaqBlockList },
    { name: 'AI Pricing Table', description: 'The AI pricing table clearly presents different pricing tiers and features. It helps users compare plans with AI-driven recommendations and dynamic updates. The block delivers a responsive display across devices, is customizable, and suitable for showcasing subscription options, packages, or service levels.', category: 'AI', url: 'ai-pricing-table', subBlockList: this.aiPricingTableBlockList },
    { name: 'Line Chart', description: 'Line charts connect data points with continuous lines to visualize trends over time or sequential data. They emphasize movement and direction, helping users quickly grasp fluctuations, growth, or decline in values across intervals.', category: 'Data Visualization', url: 'line-chart', subBlockList: this.lineChartBlockList },
    { name: 'Area Chart', description: 'Area charts are similar to line charts but fill the space beneath the line with color or shading. This emphasizes the magnitude of values over time and is especially useful for showing cumulative data, part-to-whole relationships, or comparing multiple series.', category: 'Data Visualization', url: 'area-chart', subBlockList: this.areaChartBlockList },
    { name: 'Bar Chart', description: 'Bar charts display data using rectangular bars, where the length of each bar is proportional to the value it represents. They compare discrete categories and track changes over time. Bar charts offer a straightforward visual for identifying trends, patterns, and outliers across datasets.', category: 'Data Visualization', url: 'bar-chart', subBlockList: this.barChartBlockList },
    { name: 'Scatter Chart', description: 'A scatter chart is a graphical tool that shows the relationship between two numerical variables using dots. Each point represents an individual data point, marked by its x and y values. It helps reveal correlations, clusters, and outliers within data. Scatter charts are widely used in statistics, research, and quality control. They are great for visualizing distribution patterns and trends over time.', category: 'Data Visualization', url: 'scatter-chart', subBlockList: this.scatterChartBlockList },
    { name: 'Bubble Chart', description: 'A bubble chart is a type of data visualization where data points are represented by circles on a two-dimensional plot. The x and y positions of each bubble indicate values for two separate variables. The size of each bubble conveys a third variable, adding an extra layer of insight. This allows for multivariable comparison within a single chart view. Bubble charts are useful for spotting trends, patterns, and outliers in complex datasets.', category: 'Data Visualization', url: 'bubble-chart', subBlockList: this.bubbleChartBlockList },
    { name: 'Distribution Chart', description: 'Distribution charts, such as pie and doughnut charts, visualize parts of a whole. Each segment represents a proportion of the total, making these charts effective for illustrating percentage distributions and comparative contributions within a dataset.', category: 'Data Visualization', url: 'distribution-chart', subBlockList: this.distributionChartBlockList },
  ];

  constructor() { }

  public getBlockList(): BlockList[] {
    return this.blockList;
  }

  public getThemeName(): string {
    return this.themeName;
  }

  public setThemeName(newThemeName: string): void {
    this.themeName = newThemeName;
  }

  public getSelectedCategoryIndex(): number {
    return this.categoryIndex;
  }

  public setSelectedCategoryIndex(newCategoryIndex: number): void {
    this.categoryIndex = newCategoryIndex;
  }
}
